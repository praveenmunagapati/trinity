// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: trinity.proto

#include "trinity.pb.h"
#include "trinity.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace trinity {

static const char* FIndex_method_names[] = {
  "/trinity.FIndex/GetFMap",
  "/trinity.FIndex/SetFMap",
};

std::unique_ptr< FIndex::Stub> FIndex::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< FIndex::Stub> stub(new FIndex::Stub(channel));
  return stub;
}

FIndex::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetFMap_(FIndex_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetFMap_(FIndex_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FIndex::Stub::GetFMap(::grpc::ClientContext* context, const ::trinity::FMapRequest& request, ::trinity::ForwardMap* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetFMap_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::trinity::ForwardMap>* FIndex::Stub::AsyncGetFMapRaw(::grpc::ClientContext* context, const ::trinity::FMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::trinity::ForwardMap>::Create(channel_.get(), cq, rpcmethod_GetFMap_, context, request);
}

::grpc::Status FIndex::Stub::SetFMap(::grpc::ClientContext* context, const ::trinity::ForwardMap& request, ::trinity::SetResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetFMap_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::trinity::SetResult>* FIndex::Stub::AsyncSetFMapRaw(::grpc::ClientContext* context, const ::trinity::ForwardMap& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::trinity::SetResult>::Create(channel_.get(), cq, rpcmethod_SetFMap_, context, request);
}

FIndex::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      FIndex_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FIndex::Service, ::trinity::FMapRequest, ::trinity::ForwardMap>(
          std::mem_fn(&FIndex::Service::GetFMap), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FIndex_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FIndex::Service, ::trinity::ForwardMap, ::trinity::SetResult>(
          std::mem_fn(&FIndex::Service::SetFMap), this)));
}

FIndex::Service::~Service() {
}

::grpc::Status FIndex::Service::GetFMap(::grpc::ServerContext* context, const ::trinity::FMapRequest* request, ::trinity::ForwardMap* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FIndex::Service::SetFMap(::grpc::ServerContext* context, const ::trinity::ForwardMap* request, ::trinity::SetResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* IIndex_method_names[] = {
  "/trinity.IIndex/GetIMap",
  "/trinity.IIndex/SetIMap",
};

std::unique_ptr< IIndex::Stub> IIndex::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< IIndex::Stub> stub(new IIndex::Stub(channel));
  return stub;
}

IIndex::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetIMap_(IIndex_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetIMap_(IIndex_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status IIndex::Stub::GetIMap(::grpc::ClientContext* context, const ::trinity::IMapRequest& request, ::trinity::InvertedMap* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetIMap_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::trinity::InvertedMap>* IIndex::Stub::AsyncGetIMapRaw(::grpc::ClientContext* context, const ::trinity::IMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::trinity::InvertedMap>::Create(channel_.get(), cq, rpcmethod_GetIMap_, context, request);
}

::grpc::Status IIndex::Stub::SetIMap(::grpc::ClientContext* context, const ::trinity::InvertedMap& request, ::trinity::SetResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetIMap_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::trinity::SetResult>* IIndex::Stub::AsyncSetIMapRaw(::grpc::ClientContext* context, const ::trinity::InvertedMap& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::trinity::SetResult>::Create(channel_.get(), cq, rpcmethod_SetIMap_, context, request);
}

IIndex::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      IIndex_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< IIndex::Service, ::trinity::IMapRequest, ::trinity::InvertedMap>(
          std::mem_fn(&IIndex::Service::GetIMap), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      IIndex_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< IIndex::Service, ::trinity::InvertedMap, ::trinity::SetResult>(
          std::mem_fn(&IIndex::Service::SetIMap), this)));
}

IIndex::Service::~Service() {
}

::grpc::Status IIndex::Service::GetIMap(::grpc::ServerContext* context, const ::trinity::IMapRequest* request, ::trinity::InvertedMap* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IIndex::Service::SetIMap(::grpc::ServerContext* context, const ::trinity::InvertedMap* request, ::trinity::SetResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Trinity_method_names[] = {
  "/trinity.Trinity/GetRootConfig",
  "/trinity.Trinity/SetRootConfig",
};

std::unique_ptr< Trinity::Stub> Trinity::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Trinity::Stub> stub(new Trinity::Stub(channel));
  return stub;
}

Trinity::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetRootConfig_(Trinity_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRootConfig_(Trinity_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Trinity::Stub::GetRootConfig(::grpc::ClientContext* context, const ::trinity::ConfigRequest& request, ::trinity::RootConfig* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetRootConfig_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::trinity::RootConfig>* Trinity::Stub::AsyncGetRootConfigRaw(::grpc::ClientContext* context, const ::trinity::ConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::trinity::RootConfig>::Create(channel_.get(), cq, rpcmethod_GetRootConfig_, context, request);
}

::grpc::Status Trinity::Stub::SetRootConfig(::grpc::ClientContext* context, const ::trinity::RootConfig& request, ::trinity::SetResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetRootConfig_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::trinity::SetResult>* Trinity::Stub::AsyncSetRootConfigRaw(::grpc::ClientContext* context, const ::trinity::RootConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::trinity::SetResult>::Create(channel_.get(), cq, rpcmethod_SetRootConfig_, context, request);
}

Trinity::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      Trinity_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Trinity::Service, ::trinity::ConfigRequest, ::trinity::RootConfig>(
          std::mem_fn(&Trinity::Service::GetRootConfig), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Trinity_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Trinity::Service, ::trinity::RootConfig, ::trinity::SetResult>(
          std::mem_fn(&Trinity::Service::SetRootConfig), this)));
}

Trinity::Service::~Service() {
}

::grpc::Status Trinity::Service::GetRootConfig(::grpc::ServerContext* context, const ::trinity::ConfigRequest* request, ::trinity::RootConfig* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Trinity::Service::SetRootConfig(::grpc::ServerContext* context, const ::trinity::RootConfig* request, ::trinity::SetResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Subsystem_method_names[] = {
  "/trinity.Subsystem/StartMainLoop",
};

std::unique_ptr< Subsystem::Stub> Subsystem::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Subsystem::Stub> stub(new Subsystem::Stub(channel));
  return stub;
}

Subsystem::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_StartMainLoop_(Subsystem_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Subsystem::Stub::StartMainLoop(::grpc::ClientContext* context, const ::trinity::StartSubsystemRequest& request, ::trinity::StartSubsystemResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_StartMainLoop_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::trinity::StartSubsystemResponse>* Subsystem::Stub::AsyncStartMainLoopRaw(::grpc::ClientContext* context, const ::trinity::StartSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::trinity::StartSubsystemResponse>::Create(channel_.get(), cq, rpcmethod_StartMainLoop_, context, request);
}

Subsystem::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      Subsystem_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Subsystem::Service, ::trinity::StartSubsystemRequest, ::trinity::StartSubsystemResponse>(
          std::mem_fn(&Subsystem::Service::StartMainLoop), this)));
}

Subsystem::Service::~Service() {
}

::grpc::Status Subsystem::Service::StartMainLoop(::grpc::ServerContext* context, const ::trinity::StartSubsystemRequest* request, ::trinity::StartSubsystemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Gateway_method_names[] = {
  "/trinity.Gateway/Search",
};

std::unique_ptr< Gateway::Stub> Gateway::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Gateway::Stub> stub(new Gateway::Stub(channel));
  return stub;
}

Gateway::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Search_(Gateway_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Gateway::Stub::Search(::grpc::ClientContext* context, const ::trinity::SearchRequest& request, ::trinity::SearchResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Search_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::trinity::SearchResponse>* Gateway::Stub::AsyncSearchRaw(::grpc::ClientContext* context, const ::trinity::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::trinity::SearchResponse>::Create(channel_.get(), cq, rpcmethod_Search_, context, request);
}

Gateway::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      Gateway_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Gateway::Service, ::trinity::SearchRequest, ::trinity::SearchResponse>(
          std::mem_fn(&Gateway::Service::Search), this)));
}

Gateway::Service::~Service() {
}

::grpc::Status Gateway::Service::Search(::grpc::ServerContext* context, const ::trinity::SearchRequest* request, ::trinity::SearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace trinity

