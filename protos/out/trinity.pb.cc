// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trinity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "trinity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace trinity {
class RootConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RootConfig> {
} _RootConfig_default_instance_;
class FIndexConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FIndexConfig> {
} _FIndexConfig_default_instance_;
class IIndexConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IIndexConfig> {
} _IIndexConfig_default_instance_;
class ConfigRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConfigRequest> {
} _ConfigRequest_default_instance_;
class SetResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetResult> {
} _SetResult_default_instance_;
class FMValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FMValue> {
} _FMValue_default_instance_;
class ForwardMap_TheMapEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ForwardMap::ForwardMap_TheMapEntry> {
} _ForwardMap_TheMapEntry_default_instance_;
class ForwardMapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ForwardMap> {
} _ForwardMap_default_instance_;
class DocStatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DocStat> {
} _DocStat_default_instance_;
class IMValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMValue> {
} _IMValue_default_instance_;
class InvertedMap_TheMapEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InvertedMap::InvertedMap_TheMapEntry> {
} _InvertedMap_TheMapEntry_default_instance_;
class InvertedMapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InvertedMap> {
} _InvertedMap_default_instance_;
class FMapRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FMapRequest> {
} _FMapRequest_default_instance_;
class IMapRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMapRequest> {
} _IMapRequest_default_instance_;
class StartSubsystemRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StartSubsystemRequest> {
} _StartSubsystemRequest_default_instance_;
class StartSubsystemResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StartSubsystemResponse> {
} _StartSubsystemResponse_default_instance_;
class SearchRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchRequest> {
} _SearchRequest_default_instance_;
class SearchResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchResponse> {
} _SearchResponse_default_instance_;
class SearchResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchResult> {
} _SearchResult_default_instance_;

namespace protobuf_trinity_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[19];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RootConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RootConfig, noderole_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RootConfig, findex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RootConfig, iindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RootConfig, apiport_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FIndexConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FIndexConfig, max_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FIndexConfig, store_path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IIndexConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IIndexConfig, max_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IIndexConfig, store_path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRequest, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetResult, success_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMValue, locations_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardMap, findex_api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardMap, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardMap, the_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocStat, docname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocStat, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMValue, docs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvertedMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvertedMap, iindex_api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvertedMap, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvertedMap, the_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMapRequest, dockey_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMapRequest, termkey_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartSubsystemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartSubsystemRequest, subsystem_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartSubsystemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartSubsystemResponse, response_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, description_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(RootConfig)},
  { 9, -1, sizeof(FIndexConfig)},
  { 16, -1, sizeof(IIndexConfig)},
  { 23, -1, sizeof(ConfigRequest)},
  { 29, -1, sizeof(SetResult)},
  { 35, -1, sizeof(FMValue)},
  { 41, -1, sizeof(ForwardMap)},
  { 49, -1, sizeof(DocStat)},
  { 56, -1, sizeof(IMValue)},
  { 62, -1, sizeof(InvertedMap)},
  { 70, -1, sizeof(FMapRequest)},
  { 76, -1, sizeof(IMapRequest)},
  { 82, -1, sizeof(StartSubsystemRequest)},
  { 88, -1, sizeof(StartSubsystemResponse)},
  { 94, -1, sizeof(SearchRequest)},
  { 101, -1, sizeof(SearchResponse)},
  { 107, -1, sizeof(SearchResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RootConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FIndexConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IIndexConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConfigRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FMValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ForwardMap_TheMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ForwardMap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IMValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InvertedMap_TheMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InvertedMap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FMapRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IMapRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StartSubsystemRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StartSubsystemResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchResult_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "trinity.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
file_level_metadata[6].reflection = ForwardMap::ForwardMap_TheMapEntry::CreateReflection(file_level_metadata[6].descriptor, _ForwardMap_TheMapEntry_default_instance_.get_mutable());
file_level_metadata[10].reflection = InvertedMap::InvertedMap_TheMapEntry::CreateReflection(file_level_metadata[10].descriptor, _InvertedMap_TheMapEntry_default_instance_.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

}  // namespace

void TableStruct::Shutdown() {
  _RootConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _FIndexConfig_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _IIndexConfig_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ConfigRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SetResult_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _FMValue_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ForwardMap_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _DocStat_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _IMValue_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _InvertedMap_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _FMapRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _IMapRequest_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _StartSubsystemRequest_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _StartSubsystemResponse_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _SearchRequest_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _SearchResponse_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _SearchResult_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  delete file_level_metadata[6].reflection;
  delete file_level_metadata[10].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _RootConfig_default_instance_.DefaultConstruct();
  _FIndexConfig_default_instance_.DefaultConstruct();
  _IIndexConfig_default_instance_.DefaultConstruct();
  _ConfigRequest_default_instance_.DefaultConstruct();
  _SetResult_default_instance_.DefaultConstruct();
  _FMValue_default_instance_.DefaultConstruct();
  _ForwardMap_TheMapEntry_default_instance_.DefaultConstruct();
  _ForwardMap_default_instance_.DefaultConstruct();
  _DocStat_default_instance_.DefaultConstruct();
  _IMValue_default_instance_.DefaultConstruct();
  _InvertedMap_TheMapEntry_default_instance_.DefaultConstruct();
  _InvertedMap_default_instance_.DefaultConstruct();
  _FMapRequest_default_instance_.DefaultConstruct();
  _IMapRequest_default_instance_.DefaultConstruct();
  _StartSubsystemRequest_default_instance_.DefaultConstruct();
  _StartSubsystemResponse_default_instance_.DefaultConstruct();
  _SearchRequest_default_instance_.DefaultConstruct();
  _SearchResponse_default_instance_.DefaultConstruct();
  _SearchResult_default_instance_.DefaultConstruct();
  _RootConfig_default_instance_.get_mutable()->findex_ = const_cast< ::trinity::FIndexConfig*>(
      ::trinity::FIndexConfig::internal_default_instance());
  _RootConfig_default_instance_.get_mutable()->iindex_ = const_cast< ::trinity::IIndexConfig*>(
      ::trinity::IIndexConfig::internal_default_instance());
  _ForwardMap_TheMapEntry_default_instance_.get_mutable()->set_default_instance(_ForwardMap_TheMapEntry_default_instance_.get_mutable());
  _ForwardMap_TheMapEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _InvertedMap_TheMapEntry_default_instance_.get_mutable()->set_default_instance(_InvertedMap_TheMapEntry_default_instance_.get_mutable());
  _InvertedMap_TheMapEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rtrinity.proto\022\007trinity\"}\n\nRootConfig\022\020"
      "\n\010NodeRole\030\001 \001(\t\022%\n\006FIndex\030\002 \001(\0132\025.trini"
      "ty.FIndexConfig\022%\n\006IIndex\030\003 \001(\0132\025.trinit"
      "y.IIndexConfig\022\017\n\007APIPort\030\004 \001(\t\"4\n\014FInde"
      "xConfig\022\020\n\010max_size\030\001 \001(\r\022\022\n\nstore_path\030"
      "\002 \001(\t\"4\n\014IIndexConfig\022\020\n\010max_size\030\001 \001(\r\022"
      "\022\n\nstore_path\030\002 \001(\t\"\035\n\rConfigRequest\022\014\n\004"
      "type\030\001 \001(\t\"\034\n\tSetResult\022\017\n\007success\030\001 \001(\010"
      "\"\034\n\007FMValue\022\021\n\tlocations\030\001 \003(\r\"\250\001\n\nForwa"
      "rdMap\022\032\n\022findex_api_version\030\001 \001(\r\022\013\n\003key"
      "\030\002 \001(\t\0220\n\007the_map\030\003 \003(\0132\037.trinity.Forwar"
      "dMap.TheMapEntry\032\?\n\013TheMapEntry\022\013\n\003key\030\001"
      " \001(\t\022\037\n\005value\030\002 \001(\0132\020.trinity.FMValue:\0028"
      "\001\")\n\007DocStat\022\017\n\007docname\030\001 \001(\t\022\r\n\005count\030\002"
      " \001(\r\")\n\007IMValue\022\036\n\004docs\030\001 \003(\0132\020.trinity."
      "DocStat\"\252\001\n\013InvertedMap\022\032\n\022iindex_api_ve"
      "rsion\030\001 \001(\r\022\013\n\003key\030\002 \001(\t\0221\n\007the_map\030\003 \003("
      "\0132 .trinity.InvertedMap.TheMapEntry\032\?\n\013T"
      "heMapEntry\022\013\n\003key\030\001 \001(\t\022\037\n\005value\030\002 \001(\0132\020"
      ".trinity.IMValue:\0028\001\"\035\n\013FMapRequest\022\016\n\006d"
      "ockey\030\001 \001(\t\"\036\n\013IMapRequest\022\017\n\007termkey\030\001 "
      "\001(\t\"/\n\025StartSubsystemRequest\022\026\n\016subsyste"
      "m_name\030\001 \001(\t\"/\n\026StartSubsystemResponse\022\025"
      "\n\rresponse_code\030\001 \001(\t\"*\n\rSearchRequest\022\r"
      "\n\005query\030\001 \001(\t\022\n\n\002id\030\002 \001(\014\"8\n\016SearchRespo"
      "nse\022&\n\007results\030\001 \003(\0132\025.trinity.SearchRes"
      "ult\"@\n\014SearchResult\022\r\n\005title\030\001 \001(\t\022\014\n\004ha"
      "sh\030\002 \001(\t\022\023\n\013description\030\003 \001(\t2v\n\006FIndex\022"
      "6\n\007GetFMap\022\024.trinity.FMapRequest\032\023.trini"
      "ty.ForwardMap\"\000\0224\n\007SetFMap\022\023.trinity.For"
      "wardMap\032\022.trinity.SetResult\"\0002x\n\006IIndex\022"
      "7\n\007GetIMap\022\024.trinity.IMapRequest\032\024.trini"
      "ty.InvertedMap\"\000\0225\n\007SetIMap\022\024.trinity.In"
      "vertedMap\032\022.trinity.SetResult\"\0002\205\001\n\007Trin"
      "ity\022>\n\rGetRootConfig\022\026.trinity.ConfigReq"
      "uest\032\023.trinity.RootConfig\"\000\022:\n\rSetRootCo"
      "nfig\022\023.trinity.RootConfig\032\022.trinity.SetR"
      "esult\"\0002_\n\tSubsystem\022R\n\rStartMainLoop\022\036."
      "trinity.StartSubsystemRequest\032\037.trinity."
      "StartSubsystemResponse\"\0002F\n\007Gateway\022;\n\006S"
      "earch\022\026.trinity.SearchRequest\032\027.trinity."
      "SearchResponse\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1664);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trinity.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_trinity_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RootConfig::kNodeRoleFieldNumber;
const int RootConfig::kFIndexFieldNumber;
const int RootConfig::kIIndexFieldNumber;
const int RootConfig::kAPIPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RootConfig::RootConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trinity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trinity.RootConfig)
}
RootConfig::RootConfig(const RootConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  noderole_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.noderole().size() > 0) {
    noderole_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.noderole_);
  }
  apiport_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.apiport().size() > 0) {
    apiport_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.apiport_);
  }
  if (from.has_findex()) {
    findex_ = new ::trinity::FIndexConfig(*from.findex_);
  } else {
    findex_ = NULL;
  }
  if (from.has_iindex()) {
    iindex_ = new ::trinity::IIndexConfig(*from.iindex_);
  } else {
    iindex_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:trinity.RootConfig)
}

void RootConfig::SharedCtor() {
  noderole_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apiport_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&findex_, 0, reinterpret_cast<char*>(&iindex_) -
    reinterpret_cast<char*>(&findex_) + sizeof(iindex_));
  _cached_size_ = 0;
}

RootConfig::~RootConfig() {
  // @@protoc_insertion_point(destructor:trinity.RootConfig)
  SharedDtor();
}

void RootConfig::SharedDtor() {
  noderole_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apiport_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete findex_;
  }
  if (this != internal_default_instance()) {
    delete iindex_;
  }
}

void RootConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RootConfig::descriptor() {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RootConfig& RootConfig::default_instance() {
  protobuf_trinity_2eproto::InitDefaults();
  return *internal_default_instance();
}

RootConfig* RootConfig::New(::google::protobuf::Arena* arena) const {
  RootConfig* n = new RootConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RootConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:trinity.RootConfig)
  noderole_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apiport_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && findex_ != NULL) {
    delete findex_;
  }
  findex_ = NULL;
  if (GetArenaNoVirtual() == NULL && iindex_ != NULL) {
    delete iindex_;
  }
  iindex_ = NULL;
}

bool RootConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trinity.RootConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string NodeRole = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_noderole()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->noderole().data(), this->noderole().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trinity.RootConfig.NodeRole"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .trinity.FIndexConfig FIndex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_findex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .trinity.IIndexConfig IIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iindex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string APIPort = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apiport()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->apiport().data(), this->apiport().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trinity.RootConfig.APIPort"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trinity.RootConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trinity.RootConfig)
  return false;
#undef DO_
}

void RootConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trinity.RootConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string NodeRole = 1;
  if (this->noderole().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->noderole().data(), this->noderole().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.RootConfig.NodeRole");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->noderole(), output);
  }

  // .trinity.FIndexConfig FIndex = 2;
  if (this->has_findex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->findex_, output);
  }

  // .trinity.IIndexConfig IIndex = 3;
  if (this->has_iindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->iindex_, output);
  }

  // string APIPort = 4;
  if (this->apiport().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->apiport().data(), this->apiport().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.RootConfig.APIPort");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->apiport(), output);
  }

  // @@protoc_insertion_point(serialize_end:trinity.RootConfig)
}

::google::protobuf::uint8* RootConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trinity.RootConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string NodeRole = 1;
  if (this->noderole().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->noderole().data(), this->noderole().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.RootConfig.NodeRole");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->noderole(), target);
  }

  // .trinity.FIndexConfig FIndex = 2;
  if (this->has_findex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->findex_, deterministic, target);
  }

  // .trinity.IIndexConfig IIndex = 3;
  if (this->has_iindex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->iindex_, deterministic, target);
  }

  // string APIPort = 4;
  if (this->apiport().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->apiport().data(), this->apiport().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.RootConfig.APIPort");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->apiport(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trinity.RootConfig)
  return target;
}

size_t RootConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trinity.RootConfig)
  size_t total_size = 0;

  // string NodeRole = 1;
  if (this->noderole().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->noderole());
  }

  // string APIPort = 4;
  if (this->apiport().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->apiport());
  }

  // .trinity.FIndexConfig FIndex = 2;
  if (this->has_findex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->findex_);
  }

  // .trinity.IIndexConfig IIndex = 3;
  if (this->has_iindex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->iindex_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RootConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trinity.RootConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RootConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RootConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trinity.RootConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trinity.RootConfig)
    MergeFrom(*source);
  }
}

void RootConfig::MergeFrom(const RootConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trinity.RootConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.noderole().size() > 0) {

    noderole_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.noderole_);
  }
  if (from.apiport().size() > 0) {

    apiport_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.apiport_);
  }
  if (from.has_findex()) {
    mutable_findex()->::trinity::FIndexConfig::MergeFrom(from.findex());
  }
  if (from.has_iindex()) {
    mutable_iindex()->::trinity::IIndexConfig::MergeFrom(from.iindex());
  }
}

void RootConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trinity.RootConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RootConfig::CopyFrom(const RootConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trinity.RootConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RootConfig::IsInitialized() const {
  return true;
}

void RootConfig::Swap(RootConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RootConfig::InternalSwap(RootConfig* other) {
  noderole_.Swap(&other->noderole_);
  apiport_.Swap(&other->apiport_);
  std::swap(findex_, other->findex_);
  std::swap(iindex_, other->iindex_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RootConfig::GetMetadata() const {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RootConfig

// string NodeRole = 1;
void RootConfig::clear_noderole() {
  noderole_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RootConfig::noderole() const {
  // @@protoc_insertion_point(field_get:trinity.RootConfig.NodeRole)
  return noderole_.GetNoArena();
}
void RootConfig::set_noderole(const ::std::string& value) {
  
  noderole_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trinity.RootConfig.NodeRole)
}
#if LANG_CXX11
void RootConfig::set_noderole(::std::string&& value) {
  
  noderole_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trinity.RootConfig.NodeRole)
}
#endif
void RootConfig::set_noderole(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  noderole_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trinity.RootConfig.NodeRole)
}
void RootConfig::set_noderole(const char* value, size_t size) {
  
  noderole_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trinity.RootConfig.NodeRole)
}
::std::string* RootConfig::mutable_noderole() {
  
  // @@protoc_insertion_point(field_mutable:trinity.RootConfig.NodeRole)
  return noderole_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RootConfig::release_noderole() {
  // @@protoc_insertion_point(field_release:trinity.RootConfig.NodeRole)
  
  return noderole_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RootConfig::set_allocated_noderole(::std::string* noderole) {
  if (noderole != NULL) {
    
  } else {
    
  }
  noderole_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), noderole);
  // @@protoc_insertion_point(field_set_allocated:trinity.RootConfig.NodeRole)
}

// .trinity.FIndexConfig FIndex = 2;
bool RootConfig::has_findex() const {
  return this != internal_default_instance() && findex_ != NULL;
}
void RootConfig::clear_findex() {
  if (GetArenaNoVirtual() == NULL && findex_ != NULL) delete findex_;
  findex_ = NULL;
}
const ::trinity::FIndexConfig& RootConfig::findex() const {
  // @@protoc_insertion_point(field_get:trinity.RootConfig.FIndex)
  return findex_ != NULL ? *findex_
                         : *::trinity::FIndexConfig::internal_default_instance();
}
::trinity::FIndexConfig* RootConfig::mutable_findex() {
  
  if (findex_ == NULL) {
    findex_ = new ::trinity::FIndexConfig;
  }
  // @@protoc_insertion_point(field_mutable:trinity.RootConfig.FIndex)
  return findex_;
}
::trinity::FIndexConfig* RootConfig::release_findex() {
  // @@protoc_insertion_point(field_release:trinity.RootConfig.FIndex)
  
  ::trinity::FIndexConfig* temp = findex_;
  findex_ = NULL;
  return temp;
}
void RootConfig::set_allocated_findex(::trinity::FIndexConfig* findex) {
  delete findex_;
  findex_ = findex;
  if (findex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:trinity.RootConfig.FIndex)
}

// .trinity.IIndexConfig IIndex = 3;
bool RootConfig::has_iindex() const {
  return this != internal_default_instance() && iindex_ != NULL;
}
void RootConfig::clear_iindex() {
  if (GetArenaNoVirtual() == NULL && iindex_ != NULL) delete iindex_;
  iindex_ = NULL;
}
const ::trinity::IIndexConfig& RootConfig::iindex() const {
  // @@protoc_insertion_point(field_get:trinity.RootConfig.IIndex)
  return iindex_ != NULL ? *iindex_
                         : *::trinity::IIndexConfig::internal_default_instance();
}
::trinity::IIndexConfig* RootConfig::mutable_iindex() {
  
  if (iindex_ == NULL) {
    iindex_ = new ::trinity::IIndexConfig;
  }
  // @@protoc_insertion_point(field_mutable:trinity.RootConfig.IIndex)
  return iindex_;
}
::trinity::IIndexConfig* RootConfig::release_iindex() {
  // @@protoc_insertion_point(field_release:trinity.RootConfig.IIndex)
  
  ::trinity::IIndexConfig* temp = iindex_;
  iindex_ = NULL;
  return temp;
}
void RootConfig::set_allocated_iindex(::trinity::IIndexConfig* iindex) {
  delete iindex_;
  iindex_ = iindex;
  if (iindex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:trinity.RootConfig.IIndex)
}

// string APIPort = 4;
void RootConfig::clear_apiport() {
  apiport_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RootConfig::apiport() const {
  // @@protoc_insertion_point(field_get:trinity.RootConfig.APIPort)
  return apiport_.GetNoArena();
}
void RootConfig::set_apiport(const ::std::string& value) {
  
  apiport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trinity.RootConfig.APIPort)
}
#if LANG_CXX11
void RootConfig::set_apiport(::std::string&& value) {
  
  apiport_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trinity.RootConfig.APIPort)
}
#endif
void RootConfig::set_apiport(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  apiport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trinity.RootConfig.APIPort)
}
void RootConfig::set_apiport(const char* value, size_t size) {
  
  apiport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trinity.RootConfig.APIPort)
}
::std::string* RootConfig::mutable_apiport() {
  
  // @@protoc_insertion_point(field_mutable:trinity.RootConfig.APIPort)
  return apiport_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RootConfig::release_apiport() {
  // @@protoc_insertion_point(field_release:trinity.RootConfig.APIPort)
  
  return apiport_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RootConfig::set_allocated_apiport(::std::string* apiport) {
  if (apiport != NULL) {
    
  } else {
    
  }
  apiport_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apiport);
  // @@protoc_insertion_point(field_set_allocated:trinity.RootConfig.APIPort)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FIndexConfig::kMaxSizeFieldNumber;
const int FIndexConfig::kStorePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FIndexConfig::FIndexConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trinity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trinity.FIndexConfig)
}
FIndexConfig::FIndexConfig(const FIndexConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  store_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.store_path().size() > 0) {
    store_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.store_path_);
  }
  max_size_ = from.max_size_;
  // @@protoc_insertion_point(copy_constructor:trinity.FIndexConfig)
}

void FIndexConfig::SharedCtor() {
  store_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_size_ = 0u;
  _cached_size_ = 0;
}

FIndexConfig::~FIndexConfig() {
  // @@protoc_insertion_point(destructor:trinity.FIndexConfig)
  SharedDtor();
}

void FIndexConfig::SharedDtor() {
  store_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FIndexConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FIndexConfig::descriptor() {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FIndexConfig& FIndexConfig::default_instance() {
  protobuf_trinity_2eproto::InitDefaults();
  return *internal_default_instance();
}

FIndexConfig* FIndexConfig::New(::google::protobuf::Arena* arena) const {
  FIndexConfig* n = new FIndexConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FIndexConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:trinity.FIndexConfig)
  store_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_size_ = 0u;
}

bool FIndexConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trinity.FIndexConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 max_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string store_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_store_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->store_path().data(), this->store_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trinity.FIndexConfig.store_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trinity.FIndexConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trinity.FIndexConfig)
  return false;
#undef DO_
}

void FIndexConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trinity.FIndexConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_size = 1;
  if (this->max_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_size(), output);
  }

  // string store_path = 2;
  if (this->store_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->store_path().data(), this->store_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.FIndexConfig.store_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->store_path(), output);
  }

  // @@protoc_insertion_point(serialize_end:trinity.FIndexConfig)
}

::google::protobuf::uint8* FIndexConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trinity.FIndexConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_size = 1;
  if (this->max_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_size(), target);
  }

  // string store_path = 2;
  if (this->store_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->store_path().data(), this->store_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.FIndexConfig.store_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->store_path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trinity.FIndexConfig)
  return target;
}

size_t FIndexConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trinity.FIndexConfig)
  size_t total_size = 0;

  // string store_path = 2;
  if (this->store_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->store_path());
  }

  // uint32 max_size = 1;
  if (this->max_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FIndexConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trinity.FIndexConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FIndexConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FIndexConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trinity.FIndexConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trinity.FIndexConfig)
    MergeFrom(*source);
  }
}

void FIndexConfig::MergeFrom(const FIndexConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trinity.FIndexConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.store_path().size() > 0) {

    store_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.store_path_);
  }
  if (from.max_size() != 0) {
    set_max_size(from.max_size());
  }
}

void FIndexConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trinity.FIndexConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FIndexConfig::CopyFrom(const FIndexConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trinity.FIndexConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FIndexConfig::IsInitialized() const {
  return true;
}

void FIndexConfig::Swap(FIndexConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FIndexConfig::InternalSwap(FIndexConfig* other) {
  store_path_.Swap(&other->store_path_);
  std::swap(max_size_, other->max_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FIndexConfig::GetMetadata() const {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FIndexConfig

// uint32 max_size = 1;
void FIndexConfig::clear_max_size() {
  max_size_ = 0u;
}
::google::protobuf::uint32 FIndexConfig::max_size() const {
  // @@protoc_insertion_point(field_get:trinity.FIndexConfig.max_size)
  return max_size_;
}
void FIndexConfig::set_max_size(::google::protobuf::uint32 value) {
  
  max_size_ = value;
  // @@protoc_insertion_point(field_set:trinity.FIndexConfig.max_size)
}

// string store_path = 2;
void FIndexConfig::clear_store_path() {
  store_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FIndexConfig::store_path() const {
  // @@protoc_insertion_point(field_get:trinity.FIndexConfig.store_path)
  return store_path_.GetNoArena();
}
void FIndexConfig::set_store_path(const ::std::string& value) {
  
  store_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trinity.FIndexConfig.store_path)
}
#if LANG_CXX11
void FIndexConfig::set_store_path(::std::string&& value) {
  
  store_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trinity.FIndexConfig.store_path)
}
#endif
void FIndexConfig::set_store_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  store_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trinity.FIndexConfig.store_path)
}
void FIndexConfig::set_store_path(const char* value, size_t size) {
  
  store_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trinity.FIndexConfig.store_path)
}
::std::string* FIndexConfig::mutable_store_path() {
  
  // @@protoc_insertion_point(field_mutable:trinity.FIndexConfig.store_path)
  return store_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FIndexConfig::release_store_path() {
  // @@protoc_insertion_point(field_release:trinity.FIndexConfig.store_path)
  
  return store_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FIndexConfig::set_allocated_store_path(::std::string* store_path) {
  if (store_path != NULL) {
    
  } else {
    
  }
  store_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), store_path);
  // @@protoc_insertion_point(field_set_allocated:trinity.FIndexConfig.store_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IIndexConfig::kMaxSizeFieldNumber;
const int IIndexConfig::kStorePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IIndexConfig::IIndexConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trinity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trinity.IIndexConfig)
}
IIndexConfig::IIndexConfig(const IIndexConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  store_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.store_path().size() > 0) {
    store_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.store_path_);
  }
  max_size_ = from.max_size_;
  // @@protoc_insertion_point(copy_constructor:trinity.IIndexConfig)
}

void IIndexConfig::SharedCtor() {
  store_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_size_ = 0u;
  _cached_size_ = 0;
}

IIndexConfig::~IIndexConfig() {
  // @@protoc_insertion_point(destructor:trinity.IIndexConfig)
  SharedDtor();
}

void IIndexConfig::SharedDtor() {
  store_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IIndexConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IIndexConfig::descriptor() {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IIndexConfig& IIndexConfig::default_instance() {
  protobuf_trinity_2eproto::InitDefaults();
  return *internal_default_instance();
}

IIndexConfig* IIndexConfig::New(::google::protobuf::Arena* arena) const {
  IIndexConfig* n = new IIndexConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IIndexConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:trinity.IIndexConfig)
  store_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_size_ = 0u;
}

bool IIndexConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trinity.IIndexConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 max_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string store_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_store_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->store_path().data(), this->store_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trinity.IIndexConfig.store_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trinity.IIndexConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trinity.IIndexConfig)
  return false;
#undef DO_
}

void IIndexConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trinity.IIndexConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_size = 1;
  if (this->max_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_size(), output);
  }

  // string store_path = 2;
  if (this->store_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->store_path().data(), this->store_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.IIndexConfig.store_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->store_path(), output);
  }

  // @@protoc_insertion_point(serialize_end:trinity.IIndexConfig)
}

::google::protobuf::uint8* IIndexConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trinity.IIndexConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_size = 1;
  if (this->max_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_size(), target);
  }

  // string store_path = 2;
  if (this->store_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->store_path().data(), this->store_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.IIndexConfig.store_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->store_path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trinity.IIndexConfig)
  return target;
}

size_t IIndexConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trinity.IIndexConfig)
  size_t total_size = 0;

  // string store_path = 2;
  if (this->store_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->store_path());
  }

  // uint32 max_size = 1;
  if (this->max_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IIndexConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trinity.IIndexConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const IIndexConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IIndexConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trinity.IIndexConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trinity.IIndexConfig)
    MergeFrom(*source);
  }
}

void IIndexConfig::MergeFrom(const IIndexConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trinity.IIndexConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.store_path().size() > 0) {

    store_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.store_path_);
  }
  if (from.max_size() != 0) {
    set_max_size(from.max_size());
  }
}

void IIndexConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trinity.IIndexConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IIndexConfig::CopyFrom(const IIndexConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trinity.IIndexConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IIndexConfig::IsInitialized() const {
  return true;
}

void IIndexConfig::Swap(IIndexConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IIndexConfig::InternalSwap(IIndexConfig* other) {
  store_path_.Swap(&other->store_path_);
  std::swap(max_size_, other->max_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IIndexConfig::GetMetadata() const {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IIndexConfig

// uint32 max_size = 1;
void IIndexConfig::clear_max_size() {
  max_size_ = 0u;
}
::google::protobuf::uint32 IIndexConfig::max_size() const {
  // @@protoc_insertion_point(field_get:trinity.IIndexConfig.max_size)
  return max_size_;
}
void IIndexConfig::set_max_size(::google::protobuf::uint32 value) {
  
  max_size_ = value;
  // @@protoc_insertion_point(field_set:trinity.IIndexConfig.max_size)
}

// string store_path = 2;
void IIndexConfig::clear_store_path() {
  store_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IIndexConfig::store_path() const {
  // @@protoc_insertion_point(field_get:trinity.IIndexConfig.store_path)
  return store_path_.GetNoArena();
}
void IIndexConfig::set_store_path(const ::std::string& value) {
  
  store_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trinity.IIndexConfig.store_path)
}
#if LANG_CXX11
void IIndexConfig::set_store_path(::std::string&& value) {
  
  store_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trinity.IIndexConfig.store_path)
}
#endif
void IIndexConfig::set_store_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  store_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trinity.IIndexConfig.store_path)
}
void IIndexConfig::set_store_path(const char* value, size_t size) {
  
  store_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trinity.IIndexConfig.store_path)
}
::std::string* IIndexConfig::mutable_store_path() {
  
  // @@protoc_insertion_point(field_mutable:trinity.IIndexConfig.store_path)
  return store_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IIndexConfig::release_store_path() {
  // @@protoc_insertion_point(field_release:trinity.IIndexConfig.store_path)
  
  return store_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IIndexConfig::set_allocated_store_path(::std::string* store_path) {
  if (store_path != NULL) {
    
  } else {
    
  }
  store_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), store_path);
  // @@protoc_insertion_point(field_set_allocated:trinity.IIndexConfig.store_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigRequest::ConfigRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trinity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trinity.ConfigRequest)
}
ConfigRequest::ConfigRequest(const ConfigRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:trinity.ConfigRequest)
}

void ConfigRequest::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ConfigRequest::~ConfigRequest() {
  // @@protoc_insertion_point(destructor:trinity.ConfigRequest)
  SharedDtor();
}

void ConfigRequest::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigRequest::descriptor() {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigRequest& ConfigRequest::default_instance() {
  protobuf_trinity_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConfigRequest* ConfigRequest::New(::google::protobuf::Arena* arena) const {
  ConfigRequest* n = new ConfigRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:trinity.ConfigRequest)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trinity.ConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trinity.ConfigRequest.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trinity.ConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trinity.ConfigRequest)
  return false;
#undef DO_
}

void ConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trinity.ConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.ConfigRequest.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:trinity.ConfigRequest)
}

::google::protobuf::uint8* ConfigRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trinity.ConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.ConfigRequest.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trinity.ConfigRequest)
  return target;
}

size_t ConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trinity.ConfigRequest)
  size_t total_size = 0;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trinity.ConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trinity.ConfigRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trinity.ConfigRequest)
    MergeFrom(*source);
  }
}

void ConfigRequest::MergeFrom(const ConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trinity.ConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
}

void ConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trinity.ConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigRequest::CopyFrom(const ConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trinity.ConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigRequest::IsInitialized() const {
  return true;
}

void ConfigRequest::Swap(ConfigRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigRequest::InternalSwap(ConfigRequest* other) {
  type_.Swap(&other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigRequest::GetMetadata() const {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigRequest

// string type = 1;
void ConfigRequest::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConfigRequest::type() const {
  // @@protoc_insertion_point(field_get:trinity.ConfigRequest.type)
  return type_.GetNoArena();
}
void ConfigRequest::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trinity.ConfigRequest.type)
}
#if LANG_CXX11
void ConfigRequest::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trinity.ConfigRequest.type)
}
#endif
void ConfigRequest::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trinity.ConfigRequest.type)
}
void ConfigRequest::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trinity.ConfigRequest.type)
}
::std::string* ConfigRequest::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:trinity.ConfigRequest.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfigRequest::release_type() {
  // @@protoc_insertion_point(field_release:trinity.ConfigRequest.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigRequest::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:trinity.ConfigRequest.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetResult::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetResult::SetResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trinity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trinity.SetResult)
}
SetResult::SetResult(const SetResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:trinity.SetResult)
}

void SetResult::SharedCtor() {
  success_ = false;
  _cached_size_ = 0;
}

SetResult::~SetResult() {
  // @@protoc_insertion_point(destructor:trinity.SetResult)
  SharedDtor();
}

void SetResult::SharedDtor() {
}

void SetResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetResult::descriptor() {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetResult& SetResult::default_instance() {
  protobuf_trinity_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetResult* SetResult::New(::google::protobuf::Arena* arena) const {
  SetResult* n = new SetResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetResult::Clear() {
// @@protoc_insertion_point(message_clear_start:trinity.SetResult)
  success_ = false;
}

bool SetResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trinity.SetResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trinity.SetResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trinity.SetResult)
  return false;
#undef DO_
}

void SetResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trinity.SetResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // @@protoc_insertion_point(serialize_end:trinity.SetResult)
}

::google::protobuf::uint8* SetResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trinity.SetResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trinity.SetResult)
  return target;
}

size_t SetResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trinity.SetResult)
  size_t total_size = 0;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trinity.SetResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SetResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trinity.SetResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trinity.SetResult)
    MergeFrom(*source);
  }
}

void SetResult::MergeFrom(const SetResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trinity.SetResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    set_success(from.success());
  }
}

void SetResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trinity.SetResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetResult::CopyFrom(const SetResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trinity.SetResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetResult::IsInitialized() const {
  return true;
}

void SetResult::Swap(SetResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetResult::InternalSwap(SetResult* other) {
  std::swap(success_, other->success_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetResult::GetMetadata() const {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetResult

// bool success = 1;
void SetResult::clear_success() {
  success_ = false;
}
bool SetResult::success() const {
  // @@protoc_insertion_point(field_get:trinity.SetResult.success)
  return success_;
}
void SetResult::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:trinity.SetResult.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FMValue::kLocationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FMValue::FMValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trinity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trinity.FMValue)
}
FMValue::FMValue(const FMValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      locations_(from.locations_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trinity.FMValue)
}

void FMValue::SharedCtor() {
  _cached_size_ = 0;
}

FMValue::~FMValue() {
  // @@protoc_insertion_point(destructor:trinity.FMValue)
  SharedDtor();
}

void FMValue::SharedDtor() {
}

void FMValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FMValue::descriptor() {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FMValue& FMValue::default_instance() {
  protobuf_trinity_2eproto::InitDefaults();
  return *internal_default_instance();
}

FMValue* FMValue::New(::google::protobuf::Arena* arena) const {
  FMValue* n = new FMValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FMValue::Clear() {
// @@protoc_insertion_point(message_clear_start:trinity.FMValue)
  locations_.Clear();
}

bool FMValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trinity.FMValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 locations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_locations())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_locations())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trinity.FMValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trinity.FMValue)
  return false;
#undef DO_
}

void FMValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trinity.FMValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 locations = 1;
  if (this->locations_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_locations_cached_byte_size_);
  }
  for (int i = 0, n = this->locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->locations(i), output);
  }

  // @@protoc_insertion_point(serialize_end:trinity.FMValue)
}

::google::protobuf::uint8* FMValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trinity.FMValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 locations = 1;
  if (this->locations_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _locations_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->locations_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trinity.FMValue)
  return target;
}

size_t FMValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trinity.FMValue)
  size_t total_size = 0;

  // repeated uint32 locations = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->locations_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _locations_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FMValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trinity.FMValue)
  GOOGLE_DCHECK_NE(&from, this);
  const FMValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FMValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trinity.FMValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trinity.FMValue)
    MergeFrom(*source);
  }
}

void FMValue::MergeFrom(const FMValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trinity.FMValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  locations_.MergeFrom(from.locations_);
}

void FMValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trinity.FMValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FMValue::CopyFrom(const FMValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trinity.FMValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FMValue::IsInitialized() const {
  return true;
}

void FMValue::Swap(FMValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FMValue::InternalSwap(FMValue* other) {
  locations_.InternalSwap(&other->locations_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FMValue::GetMetadata() const {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FMValue

// repeated uint32 locations = 1;
int FMValue::locations_size() const {
  return locations_.size();
}
void FMValue::clear_locations() {
  locations_.Clear();
}
::google::protobuf::uint32 FMValue::locations(int index) const {
  // @@protoc_insertion_point(field_get:trinity.FMValue.locations)
  return locations_.Get(index);
}
void FMValue::set_locations(int index, ::google::protobuf::uint32 value) {
  locations_.Set(index, value);
  // @@protoc_insertion_point(field_set:trinity.FMValue.locations)
}
void FMValue::add_locations(::google::protobuf::uint32 value) {
  locations_.Add(value);
  // @@protoc_insertion_point(field_add:trinity.FMValue.locations)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FMValue::locations() const {
  // @@protoc_insertion_point(field_list:trinity.FMValue.locations)
  return locations_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FMValue::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:trinity.FMValue.locations)
  return &locations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ForwardMap::ForwardMap_TheMapEntry::ForwardMap_TheMapEntry() {}
ForwardMap::ForwardMap_TheMapEntry::ForwardMap_TheMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ForwardMap::ForwardMap_TheMapEntry::GetMetadata() const {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[6];
}
void ForwardMap::ForwardMap_TheMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ForwardMap::ForwardMap_TheMapEntry::MergeFrom(const ForwardMap_TheMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForwardMap::kFindexApiVersionFieldNumber;
const int ForwardMap::kKeyFieldNumber;
const int ForwardMap::kTheMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForwardMap::ForwardMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trinity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trinity.ForwardMap)
}
ForwardMap::ForwardMap(const ForwardMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  the_map_.MergeFrom(from.the_map_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  findex_api_version_ = from.findex_api_version_;
  // @@protoc_insertion_point(copy_constructor:trinity.ForwardMap)
}

void ForwardMap::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  findex_api_version_ = 0u;
  _cached_size_ = 0;
}

ForwardMap::~ForwardMap() {
  // @@protoc_insertion_point(destructor:trinity.ForwardMap)
  SharedDtor();
}

void ForwardMap::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ForwardMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardMap::descriptor() {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ForwardMap& ForwardMap::default_instance() {
  protobuf_trinity_2eproto::InitDefaults();
  return *internal_default_instance();
}

ForwardMap* ForwardMap::New(::google::protobuf::Arena* arena) const {
  ForwardMap* n = new ForwardMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForwardMap::Clear() {
// @@protoc_insertion_point(message_clear_start:trinity.ForwardMap)
  the_map_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  findex_api_version_ = 0u;
}

bool ForwardMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trinity.ForwardMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 findex_api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &findex_api_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trinity.ForwardMap.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .trinity.FMValue> the_map = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          ForwardMap_TheMapEntry::Parser< ::google::protobuf::internal::MapField<
              ForwardMap_TheMapEntry,
              ::std::string, ::trinity::FMValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::trinity::FMValue > > parser(&the_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trinity.ForwardMap.TheMapEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trinity.ForwardMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trinity.ForwardMap)
  return false;
#undef DO_
}

void ForwardMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trinity.ForwardMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 findex_api_version = 1;
  if (this->findex_api_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->findex_api_version(), output);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.ForwardMap.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // map<string, .trinity.FMValue> the_map = 3;
  if (!this->the_map().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::trinity::FMValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "trinity.ForwardMap.TheMapEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->the_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->the_map().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::trinity::FMValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::trinity::FMValue >::const_iterator
          it = this->the_map().begin();
          it != this->the_map().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ForwardMap_TheMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(the_map_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ForwardMap_TheMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::trinity::FMValue >::const_iterator
          it = this->the_map().begin();
          it != this->the_map().end(); ++it) {
        entry.reset(the_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:trinity.ForwardMap)
}

::google::protobuf::uint8* ForwardMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trinity.ForwardMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 findex_api_version = 1;
  if (this->findex_api_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->findex_api_version(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.ForwardMap.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // map<string, .trinity.FMValue> the_map = 3;
  if (!this->the_map().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::trinity::FMValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "trinity.ForwardMap.TheMapEntry.key");
      }
    };

    if (deterministic &&
        this->the_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->the_map().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::trinity::FMValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::trinity::FMValue >::const_iterator
          it = this->the_map().begin();
          it != this->the_map().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ForwardMap_TheMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(the_map_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ForwardMap_TheMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::trinity::FMValue >::const_iterator
          it = this->the_map().begin();
          it != this->the_map().end(); ++it) {
        entry.reset(the_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:trinity.ForwardMap)
  return target;
}

size_t ForwardMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trinity.ForwardMap)
  size_t total_size = 0;

  // map<string, .trinity.FMValue> the_map = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->the_map_size());
  {
    ::google::protobuf::scoped_ptr<ForwardMap_TheMapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::trinity::FMValue >::const_iterator
        it = this->the_map().begin();
        it != this->the_map().end(); ++it) {
      entry.reset(the_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // uint32 findex_api_version = 1;
  if (this->findex_api_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->findex_api_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trinity.ForwardMap)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ForwardMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trinity.ForwardMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trinity.ForwardMap)
    MergeFrom(*source);
  }
}

void ForwardMap::MergeFrom(const ForwardMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trinity.ForwardMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  the_map_.MergeFrom(from.the_map_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.findex_api_version() != 0) {
    set_findex_api_version(from.findex_api_version());
  }
}

void ForwardMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trinity.ForwardMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardMap::CopyFrom(const ForwardMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trinity.ForwardMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardMap::IsInitialized() const {
  return true;
}

void ForwardMap::Swap(ForwardMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForwardMap::InternalSwap(ForwardMap* other) {
  the_map_.Swap(&other->the_map_);
  key_.Swap(&other->key_);
  std::swap(findex_api_version_, other->findex_api_version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForwardMap::GetMetadata() const {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForwardMap

// uint32 findex_api_version = 1;
void ForwardMap::clear_findex_api_version() {
  findex_api_version_ = 0u;
}
::google::protobuf::uint32 ForwardMap::findex_api_version() const {
  // @@protoc_insertion_point(field_get:trinity.ForwardMap.findex_api_version)
  return findex_api_version_;
}
void ForwardMap::set_findex_api_version(::google::protobuf::uint32 value) {
  
  findex_api_version_ = value;
  // @@protoc_insertion_point(field_set:trinity.ForwardMap.findex_api_version)
}

// string key = 2;
void ForwardMap::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ForwardMap::key() const {
  // @@protoc_insertion_point(field_get:trinity.ForwardMap.key)
  return key_.GetNoArena();
}
void ForwardMap::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trinity.ForwardMap.key)
}
#if LANG_CXX11
void ForwardMap::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trinity.ForwardMap.key)
}
#endif
void ForwardMap::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trinity.ForwardMap.key)
}
void ForwardMap::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trinity.ForwardMap.key)
}
::std::string* ForwardMap::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:trinity.ForwardMap.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForwardMap::release_key() {
  // @@protoc_insertion_point(field_release:trinity.ForwardMap.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ForwardMap::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:trinity.ForwardMap.key)
}

// map<string, .trinity.FMValue> the_map = 3;
int ForwardMap::the_map_size() const {
  return the_map_.size();
}
void ForwardMap::clear_the_map() {
  the_map_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::trinity::FMValue >&
ForwardMap::the_map() const {
  // @@protoc_insertion_point(field_map:trinity.ForwardMap.the_map)
  return the_map_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::trinity::FMValue >*
ForwardMap::mutable_the_map() {
  // @@protoc_insertion_point(field_mutable_map:trinity.ForwardMap.the_map)
  return the_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocStat::kDocnameFieldNumber;
const int DocStat::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocStat::DocStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trinity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trinity.DocStat)
}
DocStat::DocStat(const DocStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  docname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.docname().size() > 0) {
    docname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docname_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:trinity.DocStat)
}

void DocStat::SharedCtor() {
  docname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
  _cached_size_ = 0;
}

DocStat::~DocStat() {
  // @@protoc_insertion_point(destructor:trinity.DocStat)
  SharedDtor();
}

void DocStat::SharedDtor() {
  docname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DocStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocStat::descriptor() {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocStat& DocStat::default_instance() {
  protobuf_trinity_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocStat* DocStat::New(::google::protobuf::Arena* arena) const {
  DocStat* n = new DocStat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocStat::Clear() {
// @@protoc_insertion_point(message_clear_start:trinity.DocStat)
  docname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
}

bool DocStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trinity.DocStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string docname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docname().data(), this->docname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trinity.DocStat.docname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trinity.DocStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trinity.DocStat)
  return false;
#undef DO_
}

void DocStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trinity.DocStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string docname = 1;
  if (this->docname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docname().data(), this->docname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.DocStat.docname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->docname(), output);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:trinity.DocStat)
}

::google::protobuf::uint8* DocStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trinity.DocStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string docname = 1;
  if (this->docname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docname().data(), this->docname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.DocStat.docname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->docname(), target);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trinity.DocStat)
  return target;
}

size_t DocStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trinity.DocStat)
  size_t total_size = 0;

  // string docname = 1;
  if (this->docname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docname());
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trinity.DocStat)
  GOOGLE_DCHECK_NE(&from, this);
  const DocStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trinity.DocStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trinity.DocStat)
    MergeFrom(*source);
  }
}

void DocStat::MergeFrom(const DocStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trinity.DocStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.docname().size() > 0) {

    docname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docname_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void DocStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trinity.DocStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocStat::CopyFrom(const DocStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trinity.DocStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocStat::IsInitialized() const {
  return true;
}

void DocStat::Swap(DocStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocStat::InternalSwap(DocStat* other) {
  docname_.Swap(&other->docname_);
  std::swap(count_, other->count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocStat::GetMetadata() const {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocStat

// string docname = 1;
void DocStat::clear_docname() {
  docname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DocStat::docname() const {
  // @@protoc_insertion_point(field_get:trinity.DocStat.docname)
  return docname_.GetNoArena();
}
void DocStat::set_docname(const ::std::string& value) {
  
  docname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trinity.DocStat.docname)
}
#if LANG_CXX11
void DocStat::set_docname(::std::string&& value) {
  
  docname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trinity.DocStat.docname)
}
#endif
void DocStat::set_docname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  docname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trinity.DocStat.docname)
}
void DocStat::set_docname(const char* value, size_t size) {
  
  docname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trinity.DocStat.docname)
}
::std::string* DocStat::mutable_docname() {
  
  // @@protoc_insertion_point(field_mutable:trinity.DocStat.docname)
  return docname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocStat::release_docname() {
  // @@protoc_insertion_point(field_release:trinity.DocStat.docname)
  
  return docname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocStat::set_allocated_docname(::std::string* docname) {
  if (docname != NULL) {
    
  } else {
    
  }
  docname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docname);
  // @@protoc_insertion_point(field_set_allocated:trinity.DocStat.docname)
}

// uint32 count = 2;
void DocStat::clear_count() {
  count_ = 0u;
}
::google::protobuf::uint32 DocStat::count() const {
  // @@protoc_insertion_point(field_get:trinity.DocStat.count)
  return count_;
}
void DocStat::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:trinity.DocStat.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMValue::kDocsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMValue::IMValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trinity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trinity.IMValue)
}
IMValue::IMValue(const IMValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      docs_(from.docs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trinity.IMValue)
}

void IMValue::SharedCtor() {
  _cached_size_ = 0;
}

IMValue::~IMValue() {
  // @@protoc_insertion_point(destructor:trinity.IMValue)
  SharedDtor();
}

void IMValue::SharedDtor() {
}

void IMValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMValue::descriptor() {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMValue& IMValue::default_instance() {
  protobuf_trinity_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMValue* IMValue::New(::google::protobuf::Arena* arena) const {
  IMValue* n = new IMValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMValue::Clear() {
// @@protoc_insertion_point(message_clear_start:trinity.IMValue)
  docs_.Clear();
}

bool IMValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trinity.IMValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .trinity.DocStat docs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_docs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trinity.IMValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trinity.IMValue)
  return false;
#undef DO_
}

void IMValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trinity.IMValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .trinity.DocStat docs = 1;
  for (unsigned int i = 0, n = this->docs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->docs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:trinity.IMValue)
}

::google::protobuf::uint8* IMValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trinity.IMValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .trinity.DocStat docs = 1;
  for (unsigned int i = 0, n = this->docs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->docs(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trinity.IMValue)
  return target;
}

size_t IMValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trinity.IMValue)
  size_t total_size = 0;

  // repeated .trinity.DocStat docs = 1;
  {
    unsigned int count = this->docs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->docs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trinity.IMValue)
  GOOGLE_DCHECK_NE(&from, this);
  const IMValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trinity.IMValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trinity.IMValue)
    MergeFrom(*source);
  }
}

void IMValue::MergeFrom(const IMValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trinity.IMValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  docs_.MergeFrom(from.docs_);
}

void IMValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trinity.IMValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMValue::CopyFrom(const IMValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trinity.IMValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMValue::IsInitialized() const {
  return true;
}

void IMValue::Swap(IMValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMValue::InternalSwap(IMValue* other) {
  docs_.InternalSwap(&other->docs_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMValue::GetMetadata() const {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMValue

// repeated .trinity.DocStat docs = 1;
int IMValue::docs_size() const {
  return docs_.size();
}
void IMValue::clear_docs() {
  docs_.Clear();
}
const ::trinity::DocStat& IMValue::docs(int index) const {
  // @@protoc_insertion_point(field_get:trinity.IMValue.docs)
  return docs_.Get(index);
}
::trinity::DocStat* IMValue::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:trinity.IMValue.docs)
  return docs_.Mutable(index);
}
::trinity::DocStat* IMValue::add_docs() {
  // @@protoc_insertion_point(field_add:trinity.IMValue.docs)
  return docs_.Add();
}
::google::protobuf::RepeatedPtrField< ::trinity::DocStat >*
IMValue::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:trinity.IMValue.docs)
  return &docs_;
}
const ::google::protobuf::RepeatedPtrField< ::trinity::DocStat >&
IMValue::docs() const {
  // @@protoc_insertion_point(field_list:trinity.IMValue.docs)
  return docs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

InvertedMap::InvertedMap_TheMapEntry::InvertedMap_TheMapEntry() {}
InvertedMap::InvertedMap_TheMapEntry::InvertedMap_TheMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata InvertedMap::InvertedMap_TheMapEntry::GetMetadata() const {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[10];
}
void InvertedMap::InvertedMap_TheMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void InvertedMap::InvertedMap_TheMapEntry::MergeFrom(const InvertedMap_TheMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InvertedMap::kIindexApiVersionFieldNumber;
const int InvertedMap::kKeyFieldNumber;
const int InvertedMap::kTheMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InvertedMap::InvertedMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trinity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trinity.InvertedMap)
}
InvertedMap::InvertedMap(const InvertedMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  the_map_.MergeFrom(from.the_map_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  iindex_api_version_ = from.iindex_api_version_;
  // @@protoc_insertion_point(copy_constructor:trinity.InvertedMap)
}

void InvertedMap::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iindex_api_version_ = 0u;
  _cached_size_ = 0;
}

InvertedMap::~InvertedMap() {
  // @@protoc_insertion_point(destructor:trinity.InvertedMap)
  SharedDtor();
}

void InvertedMap::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InvertedMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvertedMap::descriptor() {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InvertedMap& InvertedMap::default_instance() {
  protobuf_trinity_2eproto::InitDefaults();
  return *internal_default_instance();
}

InvertedMap* InvertedMap::New(::google::protobuf::Arena* arena) const {
  InvertedMap* n = new InvertedMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InvertedMap::Clear() {
// @@protoc_insertion_point(message_clear_start:trinity.InvertedMap)
  the_map_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iindex_api_version_ = 0u;
}

bool InvertedMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trinity.InvertedMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 iindex_api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iindex_api_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trinity.InvertedMap.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .trinity.IMValue> the_map = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          InvertedMap_TheMapEntry::Parser< ::google::protobuf::internal::MapField<
              InvertedMap_TheMapEntry,
              ::std::string, ::trinity::IMValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::trinity::IMValue > > parser(&the_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trinity.InvertedMap.TheMapEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trinity.InvertedMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trinity.InvertedMap)
  return false;
#undef DO_
}

void InvertedMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trinity.InvertedMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 iindex_api_version = 1;
  if (this->iindex_api_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->iindex_api_version(), output);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.InvertedMap.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // map<string, .trinity.IMValue> the_map = 3;
  if (!this->the_map().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::trinity::IMValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "trinity.InvertedMap.TheMapEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->the_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->the_map().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::trinity::IMValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::trinity::IMValue >::const_iterator
          it = this->the_map().begin();
          it != this->the_map().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<InvertedMap_TheMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(the_map_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<InvertedMap_TheMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::trinity::IMValue >::const_iterator
          it = this->the_map().begin();
          it != this->the_map().end(); ++it) {
        entry.reset(the_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:trinity.InvertedMap)
}

::google::protobuf::uint8* InvertedMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trinity.InvertedMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 iindex_api_version = 1;
  if (this->iindex_api_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->iindex_api_version(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.InvertedMap.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // map<string, .trinity.IMValue> the_map = 3;
  if (!this->the_map().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::trinity::IMValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "trinity.InvertedMap.TheMapEntry.key");
      }
    };

    if (deterministic &&
        this->the_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->the_map().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::trinity::IMValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::trinity::IMValue >::const_iterator
          it = this->the_map().begin();
          it != this->the_map().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<InvertedMap_TheMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(the_map_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<InvertedMap_TheMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::trinity::IMValue >::const_iterator
          it = this->the_map().begin();
          it != this->the_map().end(); ++it) {
        entry.reset(the_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:trinity.InvertedMap)
  return target;
}

size_t InvertedMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trinity.InvertedMap)
  size_t total_size = 0;

  // map<string, .trinity.IMValue> the_map = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->the_map_size());
  {
    ::google::protobuf::scoped_ptr<InvertedMap_TheMapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::trinity::IMValue >::const_iterator
        it = this->the_map().begin();
        it != this->the_map().end(); ++it) {
      entry.reset(the_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // uint32 iindex_api_version = 1;
  if (this->iindex_api_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->iindex_api_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvertedMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trinity.InvertedMap)
  GOOGLE_DCHECK_NE(&from, this);
  const InvertedMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InvertedMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trinity.InvertedMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trinity.InvertedMap)
    MergeFrom(*source);
  }
}

void InvertedMap::MergeFrom(const InvertedMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trinity.InvertedMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  the_map_.MergeFrom(from.the_map_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.iindex_api_version() != 0) {
    set_iindex_api_version(from.iindex_api_version());
  }
}

void InvertedMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trinity.InvertedMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvertedMap::CopyFrom(const InvertedMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trinity.InvertedMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvertedMap::IsInitialized() const {
  return true;
}

void InvertedMap::Swap(InvertedMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InvertedMap::InternalSwap(InvertedMap* other) {
  the_map_.Swap(&other->the_map_);
  key_.Swap(&other->key_);
  std::swap(iindex_api_version_, other->iindex_api_version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InvertedMap::GetMetadata() const {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InvertedMap

// uint32 iindex_api_version = 1;
void InvertedMap::clear_iindex_api_version() {
  iindex_api_version_ = 0u;
}
::google::protobuf::uint32 InvertedMap::iindex_api_version() const {
  // @@protoc_insertion_point(field_get:trinity.InvertedMap.iindex_api_version)
  return iindex_api_version_;
}
void InvertedMap::set_iindex_api_version(::google::protobuf::uint32 value) {
  
  iindex_api_version_ = value;
  // @@protoc_insertion_point(field_set:trinity.InvertedMap.iindex_api_version)
}

// string key = 2;
void InvertedMap::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InvertedMap::key() const {
  // @@protoc_insertion_point(field_get:trinity.InvertedMap.key)
  return key_.GetNoArena();
}
void InvertedMap::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trinity.InvertedMap.key)
}
#if LANG_CXX11
void InvertedMap::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trinity.InvertedMap.key)
}
#endif
void InvertedMap::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trinity.InvertedMap.key)
}
void InvertedMap::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trinity.InvertedMap.key)
}
::std::string* InvertedMap::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:trinity.InvertedMap.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InvertedMap::release_key() {
  // @@protoc_insertion_point(field_release:trinity.InvertedMap.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InvertedMap::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:trinity.InvertedMap.key)
}

// map<string, .trinity.IMValue> the_map = 3;
int InvertedMap::the_map_size() const {
  return the_map_.size();
}
void InvertedMap::clear_the_map() {
  the_map_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::trinity::IMValue >&
InvertedMap::the_map() const {
  // @@protoc_insertion_point(field_map:trinity.InvertedMap.the_map)
  return the_map_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::trinity::IMValue >*
InvertedMap::mutable_the_map() {
  // @@protoc_insertion_point(field_mutable_map:trinity.InvertedMap.the_map)
  return the_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FMapRequest::kDockeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FMapRequest::FMapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trinity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trinity.FMapRequest)
}
FMapRequest::FMapRequest(const FMapRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dockey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dockey().size() > 0) {
    dockey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dockey_);
  }
  // @@protoc_insertion_point(copy_constructor:trinity.FMapRequest)
}

void FMapRequest::SharedCtor() {
  dockey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FMapRequest::~FMapRequest() {
  // @@protoc_insertion_point(destructor:trinity.FMapRequest)
  SharedDtor();
}

void FMapRequest::SharedDtor() {
  dockey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FMapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FMapRequest::descriptor() {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FMapRequest& FMapRequest::default_instance() {
  protobuf_trinity_2eproto::InitDefaults();
  return *internal_default_instance();
}

FMapRequest* FMapRequest::New(::google::protobuf::Arena* arena) const {
  FMapRequest* n = new FMapRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:trinity.FMapRequest)
  dockey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trinity.FMapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dockey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dockey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dockey().data(), this->dockey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trinity.FMapRequest.dockey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trinity.FMapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trinity.FMapRequest)
  return false;
#undef DO_
}

void FMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trinity.FMapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dockey = 1;
  if (this->dockey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dockey().data(), this->dockey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.FMapRequest.dockey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dockey(), output);
  }

  // @@protoc_insertion_point(serialize_end:trinity.FMapRequest)
}

::google::protobuf::uint8* FMapRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trinity.FMapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dockey = 1;
  if (this->dockey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dockey().data(), this->dockey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.FMapRequest.dockey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dockey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trinity.FMapRequest)
  return target;
}

size_t FMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trinity.FMapRequest)
  size_t total_size = 0;

  // string dockey = 1;
  if (this->dockey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dockey());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FMapRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trinity.FMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FMapRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FMapRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trinity.FMapRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trinity.FMapRequest)
    MergeFrom(*source);
  }
}

void FMapRequest::MergeFrom(const FMapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trinity.FMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dockey().size() > 0) {

    dockey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dockey_);
  }
}

void FMapRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trinity.FMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FMapRequest::CopyFrom(const FMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trinity.FMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FMapRequest::IsInitialized() const {
  return true;
}

void FMapRequest::Swap(FMapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FMapRequest::InternalSwap(FMapRequest* other) {
  dockey_.Swap(&other->dockey_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FMapRequest::GetMetadata() const {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FMapRequest

// string dockey = 1;
void FMapRequest::clear_dockey() {
  dockey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FMapRequest::dockey() const {
  // @@protoc_insertion_point(field_get:trinity.FMapRequest.dockey)
  return dockey_.GetNoArena();
}
void FMapRequest::set_dockey(const ::std::string& value) {
  
  dockey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trinity.FMapRequest.dockey)
}
#if LANG_CXX11
void FMapRequest::set_dockey(::std::string&& value) {
  
  dockey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trinity.FMapRequest.dockey)
}
#endif
void FMapRequest::set_dockey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dockey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trinity.FMapRequest.dockey)
}
void FMapRequest::set_dockey(const char* value, size_t size) {
  
  dockey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trinity.FMapRequest.dockey)
}
::std::string* FMapRequest::mutable_dockey() {
  
  // @@protoc_insertion_point(field_mutable:trinity.FMapRequest.dockey)
  return dockey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FMapRequest::release_dockey() {
  // @@protoc_insertion_point(field_release:trinity.FMapRequest.dockey)
  
  return dockey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FMapRequest::set_allocated_dockey(::std::string* dockey) {
  if (dockey != NULL) {
    
  } else {
    
  }
  dockey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dockey);
  // @@protoc_insertion_point(field_set_allocated:trinity.FMapRequest.dockey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMapRequest::kTermkeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMapRequest::IMapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trinity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trinity.IMapRequest)
}
IMapRequest::IMapRequest(const IMapRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  termkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.termkey().size() > 0) {
    termkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.termkey_);
  }
  // @@protoc_insertion_point(copy_constructor:trinity.IMapRequest)
}

void IMapRequest::SharedCtor() {
  termkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

IMapRequest::~IMapRequest() {
  // @@protoc_insertion_point(destructor:trinity.IMapRequest)
  SharedDtor();
}

void IMapRequest::SharedDtor() {
  termkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMapRequest::descriptor() {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMapRequest& IMapRequest::default_instance() {
  protobuf_trinity_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMapRequest* IMapRequest::New(::google::protobuf::Arena* arena) const {
  IMapRequest* n = new IMapRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:trinity.IMapRequest)
  termkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trinity.IMapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string termkey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_termkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->termkey().data(), this->termkey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trinity.IMapRequest.termkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trinity.IMapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trinity.IMapRequest)
  return false;
#undef DO_
}

void IMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trinity.IMapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string termkey = 1;
  if (this->termkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->termkey().data(), this->termkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.IMapRequest.termkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->termkey(), output);
  }

  // @@protoc_insertion_point(serialize_end:trinity.IMapRequest)
}

::google::protobuf::uint8* IMapRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trinity.IMapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string termkey = 1;
  if (this->termkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->termkey().data(), this->termkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.IMapRequest.termkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->termkey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trinity.IMapRequest)
  return target;
}

size_t IMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trinity.IMapRequest)
  size_t total_size = 0;

  // string termkey = 1;
  if (this->termkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->termkey());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMapRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trinity.IMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IMapRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMapRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trinity.IMapRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trinity.IMapRequest)
    MergeFrom(*source);
  }
}

void IMapRequest::MergeFrom(const IMapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trinity.IMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.termkey().size() > 0) {

    termkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.termkey_);
  }
}

void IMapRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trinity.IMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMapRequest::CopyFrom(const IMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trinity.IMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMapRequest::IsInitialized() const {
  return true;
}

void IMapRequest::Swap(IMapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMapRequest::InternalSwap(IMapRequest* other) {
  termkey_.Swap(&other->termkey_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMapRequest::GetMetadata() const {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMapRequest

// string termkey = 1;
void IMapRequest::clear_termkey() {
  termkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMapRequest::termkey() const {
  // @@protoc_insertion_point(field_get:trinity.IMapRequest.termkey)
  return termkey_.GetNoArena();
}
void IMapRequest::set_termkey(const ::std::string& value) {
  
  termkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trinity.IMapRequest.termkey)
}
#if LANG_CXX11
void IMapRequest::set_termkey(::std::string&& value) {
  
  termkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trinity.IMapRequest.termkey)
}
#endif
void IMapRequest::set_termkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  termkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trinity.IMapRequest.termkey)
}
void IMapRequest::set_termkey(const char* value, size_t size) {
  
  termkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trinity.IMapRequest.termkey)
}
::std::string* IMapRequest::mutable_termkey() {
  
  // @@protoc_insertion_point(field_mutable:trinity.IMapRequest.termkey)
  return termkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMapRequest::release_termkey() {
  // @@protoc_insertion_point(field_release:trinity.IMapRequest.termkey)
  
  return termkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMapRequest::set_allocated_termkey(::std::string* termkey) {
  if (termkey != NULL) {
    
  } else {
    
  }
  termkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), termkey);
  // @@protoc_insertion_point(field_set_allocated:trinity.IMapRequest.termkey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartSubsystemRequest::kSubsystemNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartSubsystemRequest::StartSubsystemRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trinity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trinity.StartSubsystemRequest)
}
StartSubsystemRequest::StartSubsystemRequest(const StartSubsystemRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subsystem_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subsystem_name().size() > 0) {
    subsystem_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subsystem_name_);
  }
  // @@protoc_insertion_point(copy_constructor:trinity.StartSubsystemRequest)
}

void StartSubsystemRequest::SharedCtor() {
  subsystem_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

StartSubsystemRequest::~StartSubsystemRequest() {
  // @@protoc_insertion_point(destructor:trinity.StartSubsystemRequest)
  SharedDtor();
}

void StartSubsystemRequest::SharedDtor() {
  subsystem_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StartSubsystemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartSubsystemRequest::descriptor() {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartSubsystemRequest& StartSubsystemRequest::default_instance() {
  protobuf_trinity_2eproto::InitDefaults();
  return *internal_default_instance();
}

StartSubsystemRequest* StartSubsystemRequest::New(::google::protobuf::Arena* arena) const {
  StartSubsystemRequest* n = new StartSubsystemRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartSubsystemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:trinity.StartSubsystemRequest)
  subsystem_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StartSubsystemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trinity.StartSubsystemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string subsystem_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subsystem_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subsystem_name().data(), this->subsystem_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trinity.StartSubsystemRequest.subsystem_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trinity.StartSubsystemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trinity.StartSubsystemRequest)
  return false;
#undef DO_
}

void StartSubsystemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trinity.StartSubsystemRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subsystem_name = 1;
  if (this->subsystem_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subsystem_name().data(), this->subsystem_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.StartSubsystemRequest.subsystem_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subsystem_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:trinity.StartSubsystemRequest)
}

::google::protobuf::uint8* StartSubsystemRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trinity.StartSubsystemRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subsystem_name = 1;
  if (this->subsystem_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subsystem_name().data(), this->subsystem_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.StartSubsystemRequest.subsystem_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subsystem_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trinity.StartSubsystemRequest)
  return target;
}

size_t StartSubsystemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trinity.StartSubsystemRequest)
  size_t total_size = 0;

  // string subsystem_name = 1;
  if (this->subsystem_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subsystem_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartSubsystemRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trinity.StartSubsystemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartSubsystemRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartSubsystemRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trinity.StartSubsystemRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trinity.StartSubsystemRequest)
    MergeFrom(*source);
  }
}

void StartSubsystemRequest::MergeFrom(const StartSubsystemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trinity.StartSubsystemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subsystem_name().size() > 0) {

    subsystem_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subsystem_name_);
  }
}

void StartSubsystemRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trinity.StartSubsystemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartSubsystemRequest::CopyFrom(const StartSubsystemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trinity.StartSubsystemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartSubsystemRequest::IsInitialized() const {
  return true;
}

void StartSubsystemRequest::Swap(StartSubsystemRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartSubsystemRequest::InternalSwap(StartSubsystemRequest* other) {
  subsystem_name_.Swap(&other->subsystem_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartSubsystemRequest::GetMetadata() const {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartSubsystemRequest

// string subsystem_name = 1;
void StartSubsystemRequest::clear_subsystem_name() {
  subsystem_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StartSubsystemRequest::subsystem_name() const {
  // @@protoc_insertion_point(field_get:trinity.StartSubsystemRequest.subsystem_name)
  return subsystem_name_.GetNoArena();
}
void StartSubsystemRequest::set_subsystem_name(const ::std::string& value) {
  
  subsystem_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trinity.StartSubsystemRequest.subsystem_name)
}
#if LANG_CXX11
void StartSubsystemRequest::set_subsystem_name(::std::string&& value) {
  
  subsystem_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trinity.StartSubsystemRequest.subsystem_name)
}
#endif
void StartSubsystemRequest::set_subsystem_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subsystem_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trinity.StartSubsystemRequest.subsystem_name)
}
void StartSubsystemRequest::set_subsystem_name(const char* value, size_t size) {
  
  subsystem_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trinity.StartSubsystemRequest.subsystem_name)
}
::std::string* StartSubsystemRequest::mutable_subsystem_name() {
  
  // @@protoc_insertion_point(field_mutable:trinity.StartSubsystemRequest.subsystem_name)
  return subsystem_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartSubsystemRequest::release_subsystem_name() {
  // @@protoc_insertion_point(field_release:trinity.StartSubsystemRequest.subsystem_name)
  
  return subsystem_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartSubsystemRequest::set_allocated_subsystem_name(::std::string* subsystem_name) {
  if (subsystem_name != NULL) {
    
  } else {
    
  }
  subsystem_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subsystem_name);
  // @@protoc_insertion_point(field_set_allocated:trinity.StartSubsystemRequest.subsystem_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartSubsystemResponse::kResponseCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartSubsystemResponse::StartSubsystemResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trinity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trinity.StartSubsystemResponse)
}
StartSubsystemResponse::StartSubsystemResponse(const StartSubsystemResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.response_code().size() > 0) {
    response_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_code_);
  }
  // @@protoc_insertion_point(copy_constructor:trinity.StartSubsystemResponse)
}

void StartSubsystemResponse::SharedCtor() {
  response_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

StartSubsystemResponse::~StartSubsystemResponse() {
  // @@protoc_insertion_point(destructor:trinity.StartSubsystemResponse)
  SharedDtor();
}

void StartSubsystemResponse::SharedDtor() {
  response_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StartSubsystemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartSubsystemResponse::descriptor() {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartSubsystemResponse& StartSubsystemResponse::default_instance() {
  protobuf_trinity_2eproto::InitDefaults();
  return *internal_default_instance();
}

StartSubsystemResponse* StartSubsystemResponse::New(::google::protobuf::Arena* arena) const {
  StartSubsystemResponse* n = new StartSubsystemResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartSubsystemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:trinity.StartSubsystemResponse)
  response_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StartSubsystemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trinity.StartSubsystemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string response_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->response_code().data(), this->response_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trinity.StartSubsystemResponse.response_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trinity.StartSubsystemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trinity.StartSubsystemResponse)
  return false;
#undef DO_
}

void StartSubsystemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trinity.StartSubsystemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response_code = 1;
  if (this->response_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_code().data(), this->response_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.StartSubsystemResponse.response_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->response_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:trinity.StartSubsystemResponse)
}

::google::protobuf::uint8* StartSubsystemResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trinity.StartSubsystemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response_code = 1;
  if (this->response_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_code().data(), this->response_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.StartSubsystemResponse.response_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->response_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trinity.StartSubsystemResponse)
  return target;
}

size_t StartSubsystemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trinity.StartSubsystemResponse)
  size_t total_size = 0;

  // string response_code = 1;
  if (this->response_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->response_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartSubsystemResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trinity.StartSubsystemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartSubsystemResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartSubsystemResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trinity.StartSubsystemResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trinity.StartSubsystemResponse)
    MergeFrom(*source);
  }
}

void StartSubsystemResponse::MergeFrom(const StartSubsystemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trinity.StartSubsystemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response_code().size() > 0) {

    response_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_code_);
  }
}

void StartSubsystemResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trinity.StartSubsystemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartSubsystemResponse::CopyFrom(const StartSubsystemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trinity.StartSubsystemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartSubsystemResponse::IsInitialized() const {
  return true;
}

void StartSubsystemResponse::Swap(StartSubsystemResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartSubsystemResponse::InternalSwap(StartSubsystemResponse* other) {
  response_code_.Swap(&other->response_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartSubsystemResponse::GetMetadata() const {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartSubsystemResponse

// string response_code = 1;
void StartSubsystemResponse::clear_response_code() {
  response_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StartSubsystemResponse::response_code() const {
  // @@protoc_insertion_point(field_get:trinity.StartSubsystemResponse.response_code)
  return response_code_.GetNoArena();
}
void StartSubsystemResponse::set_response_code(const ::std::string& value) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trinity.StartSubsystemResponse.response_code)
}
#if LANG_CXX11
void StartSubsystemResponse::set_response_code(::std::string&& value) {
  
  response_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trinity.StartSubsystemResponse.response_code)
}
#endif
void StartSubsystemResponse::set_response_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trinity.StartSubsystemResponse.response_code)
}
void StartSubsystemResponse::set_response_code(const char* value, size_t size) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trinity.StartSubsystemResponse.response_code)
}
::std::string* StartSubsystemResponse::mutable_response_code() {
  
  // @@protoc_insertion_point(field_mutable:trinity.StartSubsystemResponse.response_code)
  return response_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartSubsystemResponse::release_response_code() {
  // @@protoc_insertion_point(field_release:trinity.StartSubsystemResponse.response_code)
  
  return response_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartSubsystemResponse::set_allocated_response_code(::std::string* response_code) {
  if (response_code != NULL) {
    
  } else {
    
  }
  response_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_code);
  // @@protoc_insertion_point(field_set_allocated:trinity.StartSubsystemResponse.response_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchRequest::kQueryFieldNumber;
const int SearchRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchRequest::SearchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trinity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trinity.SearchRequest)
}
SearchRequest::SearchRequest(const SearchRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:trinity.SearchRequest)
}

void SearchRequest::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SearchRequest::~SearchRequest() {
  // @@protoc_insertion_point(destructor:trinity.SearchRequest)
  SharedDtor();
}

void SearchRequest::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchRequest::descriptor() {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchRequest& SearchRequest::default_instance() {
  protobuf_trinity_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchRequest* SearchRequest::New(::google::protobuf::Arena* arena) const {
  SearchRequest* n = new SearchRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:trinity.SearchRequest)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SearchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trinity.SearchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trinity.SearchRequest.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trinity.SearchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trinity.SearchRequest)
  return false;
#undef DO_
}

void SearchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trinity.SearchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.SearchRequest.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // bytes id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:trinity.SearchRequest)
}

::google::protobuf::uint8* SearchRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trinity.SearchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.SearchRequest.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // bytes id = 2;
  if (this->id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trinity.SearchRequest)
  return target;
}

size_t SearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trinity.SearchRequest)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  // bytes id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trinity.SearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trinity.SearchRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trinity.SearchRequest)
    MergeFrom(*source);
  }
}

void SearchRequest::MergeFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trinity.SearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void SearchRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trinity.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trinity.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {
  return true;
}

void SearchRequest::Swap(SearchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchRequest::InternalSwap(SearchRequest* other) {
  query_.Swap(&other->query_);
  id_.Swap(&other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchRequest::GetMetadata() const {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchRequest

// string query = 1;
void SearchRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SearchRequest::query() const {
  // @@protoc_insertion_point(field_get:trinity.SearchRequest.query)
  return query_.GetNoArena();
}
void SearchRequest::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trinity.SearchRequest.query)
}
#if LANG_CXX11
void SearchRequest::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trinity.SearchRequest.query)
}
#endif
void SearchRequest::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trinity.SearchRequest.query)
}
void SearchRequest::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trinity.SearchRequest.query)
}
::std::string* SearchRequest::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:trinity.SearchRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchRequest::release_query() {
  // @@protoc_insertion_point(field_release:trinity.SearchRequest.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:trinity.SearchRequest.query)
}

// bytes id = 2;
void SearchRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SearchRequest::id() const {
  // @@protoc_insertion_point(field_get:trinity.SearchRequest.id)
  return id_.GetNoArena();
}
void SearchRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trinity.SearchRequest.id)
}
#if LANG_CXX11
void SearchRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trinity.SearchRequest.id)
}
#endif
void SearchRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trinity.SearchRequest.id)
}
void SearchRequest::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trinity.SearchRequest.id)
}
::std::string* SearchRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:trinity.SearchRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchRequest::release_id() {
  // @@protoc_insertion_point(field_release:trinity.SearchRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:trinity.SearchRequest.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchResponse::SearchResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trinity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trinity.SearchResponse)
}
SearchResponse::SearchResponse(const SearchResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trinity.SearchResponse)
}

void SearchResponse::SharedCtor() {
  _cached_size_ = 0;
}

SearchResponse::~SearchResponse() {
  // @@protoc_insertion_point(destructor:trinity.SearchResponse)
  SharedDtor();
}

void SearchResponse::SharedDtor() {
}

void SearchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchResponse::descriptor() {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchResponse& SearchResponse::default_instance() {
  protobuf_trinity_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchResponse* SearchResponse::New(::google::protobuf::Arena* arena) const {
  SearchResponse* n = new SearchResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:trinity.SearchResponse)
  results_.Clear();
}

bool SearchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trinity.SearchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .trinity.SearchResult results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trinity.SearchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trinity.SearchResponse)
  return false;
#undef DO_
}

void SearchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trinity.SearchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .trinity.SearchResult results = 1;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(i), output);
  }

  // @@protoc_insertion_point(serialize_end:trinity.SearchResponse)
}

::google::protobuf::uint8* SearchResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trinity.SearchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .trinity.SearchResult results = 1;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->results(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trinity.SearchResponse)
  return target;
}

size_t SearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trinity.SearchResponse)
  size_t total_size = 0;

  // repeated .trinity.SearchResult results = 1;
  {
    unsigned int count = this->results_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trinity.SearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trinity.SearchResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trinity.SearchResponse)
    MergeFrom(*source);
  }
}

void SearchResponse::MergeFrom(const SearchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trinity.SearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void SearchResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trinity.SearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResponse::CopyFrom(const SearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trinity.SearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResponse::IsInitialized() const {
  return true;
}

void SearchResponse::Swap(SearchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchResponse::InternalSwap(SearchResponse* other) {
  results_.InternalSwap(&other->results_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchResponse::GetMetadata() const {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchResponse

// repeated .trinity.SearchResult results = 1;
int SearchResponse::results_size() const {
  return results_.size();
}
void SearchResponse::clear_results() {
  results_.Clear();
}
const ::trinity::SearchResult& SearchResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:trinity.SearchResponse.results)
  return results_.Get(index);
}
::trinity::SearchResult* SearchResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:trinity.SearchResponse.results)
  return results_.Mutable(index);
}
::trinity::SearchResult* SearchResponse::add_results() {
  // @@protoc_insertion_point(field_add:trinity.SearchResponse.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::trinity::SearchResult >*
SearchResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:trinity.SearchResponse.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::trinity::SearchResult >&
SearchResponse::results() const {
  // @@protoc_insertion_point(field_list:trinity.SearchResponse.results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchResult::kTitleFieldNumber;
const int SearchResult::kHashFieldNumber;
const int SearchResult::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchResult::SearchResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trinity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trinity.SearchResult)
}
SearchResult::SearchResult(const SearchResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  // @@protoc_insertion_point(copy_constructor:trinity.SearchResult)
}

void SearchResult::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SearchResult::~SearchResult() {
  // @@protoc_insertion_point(destructor:trinity.SearchResult)
  SharedDtor();
}

void SearchResult::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchResult::descriptor() {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchResult& SearchResult::default_instance() {
  protobuf_trinity_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchResult* SearchResult::New(::google::protobuf::Arena* arena) const {
  SearchResult* n = new SearchResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:trinity.SearchResult)
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SearchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trinity.SearchResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string title = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trinity.SearchResult.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trinity.SearchResult.hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trinity.SearchResult.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trinity.SearchResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trinity.SearchResult)
  return false;
#undef DO_
}

void SearchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trinity.SearchResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.SearchResult.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // string hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.SearchResult.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hash(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.SearchResult.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // @@protoc_insertion_point(serialize_end:trinity.SearchResult)
}

::google::protobuf::uint8* SearchResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trinity.SearchResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.SearchResult.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // string hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.SearchResult.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hash(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trinity.SearchResult.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trinity.SearchResult)
  return target;
}

size_t SearchResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trinity.SearchResult)
  size_t total_size = 0;

  // string title = 1;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trinity.SearchResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trinity.SearchResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trinity.SearchResult)
    MergeFrom(*source);
  }
}

void SearchResult::MergeFrom(const SearchResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trinity.SearchResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void SearchResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trinity.SearchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResult::CopyFrom(const SearchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trinity.SearchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResult::IsInitialized() const {
  return true;
}

void SearchResult::Swap(SearchResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchResult::InternalSwap(SearchResult* other) {
  title_.Swap(&other->title_);
  hash_.Swap(&other->hash_);
  description_.Swap(&other->description_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchResult::GetMetadata() const {
  protobuf_trinity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trinity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchResult

// string title = 1;
void SearchResult::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SearchResult::title() const {
  // @@protoc_insertion_point(field_get:trinity.SearchResult.title)
  return title_.GetNoArena();
}
void SearchResult::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trinity.SearchResult.title)
}
#if LANG_CXX11
void SearchResult::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trinity.SearchResult.title)
}
#endif
void SearchResult::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trinity.SearchResult.title)
}
void SearchResult::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trinity.SearchResult.title)
}
::std::string* SearchResult::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:trinity.SearchResult.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchResult::release_title() {
  // @@protoc_insertion_point(field_release:trinity.SearchResult.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchResult::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:trinity.SearchResult.title)
}

// string hash = 2;
void SearchResult::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SearchResult::hash() const {
  // @@protoc_insertion_point(field_get:trinity.SearchResult.hash)
  return hash_.GetNoArena();
}
void SearchResult::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trinity.SearchResult.hash)
}
#if LANG_CXX11
void SearchResult::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trinity.SearchResult.hash)
}
#endif
void SearchResult::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trinity.SearchResult.hash)
}
void SearchResult::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trinity.SearchResult.hash)
}
::std::string* SearchResult::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:trinity.SearchResult.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchResult::release_hash() {
  // @@protoc_insertion_point(field_release:trinity.SearchResult.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchResult::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:trinity.SearchResult.hash)
}

// string description = 3;
void SearchResult::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SearchResult::description() const {
  // @@protoc_insertion_point(field_get:trinity.SearchResult.description)
  return description_.GetNoArena();
}
void SearchResult::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trinity.SearchResult.description)
}
#if LANG_CXX11
void SearchResult::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trinity.SearchResult.description)
}
#endif
void SearchResult::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trinity.SearchResult.description)
}
void SearchResult::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trinity.SearchResult.description)
}
::std::string* SearchResult::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:trinity.SearchResult.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchResult::release_description() {
  // @@protoc_insertion_point(field_release:trinity.SearchResult.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchResult::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:trinity.SearchResult.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace trinity

// @@protoc_insertion_point(global_scope)
