// Code generated by protoc-gen-gogo.
// source: trinity.proto
// DO NOT EDIT!

/*
	Package trinity is a generated protocol buffer package.

	It is generated from these files:
		trinity.proto

	It has these top-level messages:
		RootConfig
		FIndexConfig
		IIndexConfig
		ConfigRequest
		SetResult
		FMValue
		ForwardMap
		DocStat
		IMValue
		InvertedMap
		DocMapRequest
		StartSubsystemRequest
		StartSubsystemResponse
		SearchQuery
		SearchResponse
		SearchResult
*/
package trinity

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RootConfig struct {
	NodeRole string        `protobuf:"bytes,1,opt,name=NodeRole,proto3" json:"NodeRole,omitempty"`
	FIndex   *FIndexConfig `protobuf:"bytes,2,opt,name=FIndex" json:"FIndex,omitempty"`
	IIndex   *IIndexConfig `protobuf:"bytes,3,opt,name=IIndex" json:"IIndex,omitempty"`
	APIPort  string        `protobuf:"bytes,4,opt,name=APIPort,proto3" json:"APIPort,omitempty"`
}

func (m *RootConfig) Reset()                    { *m = RootConfig{} }
func (m *RootConfig) String() string            { return proto.CompactTextString(m) }
func (*RootConfig) ProtoMessage()               {}
func (*RootConfig) Descriptor() ([]byte, []int) { return fileDescriptorTrinity, []int{0} }

func (m *RootConfig) GetFIndex() *FIndexConfig {
	if m != nil {
		return m.FIndex
	}
	return nil
}

func (m *RootConfig) GetIIndex() *IIndexConfig {
	if m != nil {
		return m.IIndex
	}
	return nil
}

type FIndexConfig struct {
	MaxSize   uint32 `protobuf:"varint,1,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	StorePath string `protobuf:"bytes,2,opt,name=store_path,json=storePath,proto3" json:"store_path,omitempty"`
}

func (m *FIndexConfig) Reset()                    { *m = FIndexConfig{} }
func (m *FIndexConfig) String() string            { return proto.CompactTextString(m) }
func (*FIndexConfig) ProtoMessage()               {}
func (*FIndexConfig) Descriptor() ([]byte, []int) { return fileDescriptorTrinity, []int{1} }

type IIndexConfig struct {
	MaxSize   uint32 `protobuf:"varint,1,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	StorePath string `protobuf:"bytes,2,opt,name=store_path,json=storePath,proto3" json:"store_path,omitempty"`
}

func (m *IIndexConfig) Reset()                    { *m = IIndexConfig{} }
func (m *IIndexConfig) String() string            { return proto.CompactTextString(m) }
func (*IIndexConfig) ProtoMessage()               {}
func (*IIndexConfig) Descriptor() ([]byte, []int) { return fileDescriptorTrinity, []int{2} }

type ConfigRequest struct {
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *ConfigRequest) Reset()                    { *m = ConfigRequest{} }
func (m *ConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigRequest) ProtoMessage()               {}
func (*ConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptorTrinity, []int{3} }

type SetResult struct {
	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *SetResult) Reset()                    { *m = SetResult{} }
func (m *SetResult) String() string            { return proto.CompactTextString(m) }
func (*SetResult) ProtoMessage()               {}
func (*SetResult) Descriptor() ([]byte, []int) { return fileDescriptorTrinity, []int{4} }

type FMValue struct {
	Locations []uint32 `protobuf:"varint,1,rep,name=locations" json:"locations,omitempty"`
}

func (m *FMValue) Reset()                    { *m = FMValue{} }
func (m *FMValue) String() string            { return proto.CompactTextString(m) }
func (*FMValue) ProtoMessage()               {}
func (*FMValue) Descriptor() ([]byte, []int) { return fileDescriptorTrinity, []int{5} }

type ForwardMap struct {
	FindexApiVersion uint32              `protobuf:"varint,1,opt,name=findex_api_version,json=findexApiVersion,proto3" json:"findex_api_version,omitempty"`
	TheMap           map[string]*FMValue `protobuf:"bytes,2,rep,name=the_map,json=theMap" json:"the_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ForwardMap) Reset()                    { *m = ForwardMap{} }
func (m *ForwardMap) String() string            { return proto.CompactTextString(m) }
func (*ForwardMap) ProtoMessage()               {}
func (*ForwardMap) Descriptor() ([]byte, []int) { return fileDescriptorTrinity, []int{6} }

func (m *ForwardMap) GetTheMap() map[string]*FMValue {
	if m != nil {
		return m.TheMap
	}
	return nil
}

type DocStat struct {
	Docname string `protobuf:"bytes,1,opt,name=docname,proto3" json:"docname,omitempty"`
	Count   uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *DocStat) Reset()                    { *m = DocStat{} }
func (m *DocStat) String() string            { return proto.CompactTextString(m) }
func (*DocStat) ProtoMessage()               {}
func (*DocStat) Descriptor() ([]byte, []int) { return fileDescriptorTrinity, []int{7} }

type IMValue struct {
	Docs []*DocStat `protobuf:"bytes,1,rep,name=docs" json:"docs,omitempty"`
}

func (m *IMValue) Reset()                    { *m = IMValue{} }
func (m *IMValue) String() string            { return proto.CompactTextString(m) }
func (*IMValue) ProtoMessage()               {}
func (*IMValue) Descriptor() ([]byte, []int) { return fileDescriptorTrinity, []int{8} }

func (m *IMValue) GetDocs() []*DocStat {
	if m != nil {
		return m.Docs
	}
	return nil
}

type InvertedMap struct {
	IindexApiVersion uint32              `protobuf:"varint,1,opt,name=iindex_api_version,json=iindexApiVersion,proto3" json:"iindex_api_version,omitempty"`
	TheMap           map[string]*IMValue `protobuf:"bytes,2,rep,name=the_map,json=theMap" json:"the_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *InvertedMap) Reset()                    { *m = InvertedMap{} }
func (m *InvertedMap) String() string            { return proto.CompactTextString(m) }
func (*InvertedMap) ProtoMessage()               {}
func (*InvertedMap) Descriptor() ([]byte, []int) { return fileDescriptorTrinity, []int{9} }

func (m *InvertedMap) GetTheMap() map[string]*IMValue {
	if m != nil {
		return m.TheMap
	}
	return nil
}

type DocMapRequest struct {
	Docname string `protobuf:"bytes,1,opt,name=docname,proto3" json:"docname,omitempty"`
}

func (m *DocMapRequest) Reset()                    { *m = DocMapRequest{} }
func (m *DocMapRequest) String() string            { return proto.CompactTextString(m) }
func (*DocMapRequest) ProtoMessage()               {}
func (*DocMapRequest) Descriptor() ([]byte, []int) { return fileDescriptorTrinity, []int{10} }

type StartSubsystemRequest struct {
	SubsystemName string `protobuf:"bytes,1,opt,name=subsystem_name,json=subsystemName,proto3" json:"subsystem_name,omitempty"`
}

func (m *StartSubsystemRequest) Reset()                    { *m = StartSubsystemRequest{} }
func (m *StartSubsystemRequest) String() string            { return proto.CompactTextString(m) }
func (*StartSubsystemRequest) ProtoMessage()               {}
func (*StartSubsystemRequest) Descriptor() ([]byte, []int) { return fileDescriptorTrinity, []int{11} }

type StartSubsystemResponse struct {
	ResponseCode string `protobuf:"bytes,1,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
}

func (m *StartSubsystemResponse) Reset()                    { *m = StartSubsystemResponse{} }
func (m *StartSubsystemResponse) String() string            { return proto.CompactTextString(m) }
func (*StartSubsystemResponse) ProtoMessage()               {}
func (*StartSubsystemResponse) Descriptor() ([]byte, []int) { return fileDescriptorTrinity, []int{12} }

type SearchQuery struct {
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *SearchQuery) Reset()                    { *m = SearchQuery{} }
func (m *SearchQuery) String() string            { return proto.CompactTextString(m) }
func (*SearchQuery) ProtoMessage()               {}
func (*SearchQuery) Descriptor() ([]byte, []int) { return fileDescriptorTrinity, []int{13} }

type SearchResponse struct {
	Results []*SearchResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptorTrinity, []int{14} }

func (m *SearchResponse) GetResults() []*SearchResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type SearchResult struct {
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Hash        string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *SearchResult) Reset()                    { *m = SearchResult{} }
func (m *SearchResult) String() string            { return proto.CompactTextString(m) }
func (*SearchResult) ProtoMessage()               {}
func (*SearchResult) Descriptor() ([]byte, []int) { return fileDescriptorTrinity, []int{15} }

func init() {
	proto.RegisterType((*RootConfig)(nil), "trinity.RootConfig")
	proto.RegisterType((*FIndexConfig)(nil), "trinity.FIndexConfig")
	proto.RegisterType((*IIndexConfig)(nil), "trinity.IIndexConfig")
	proto.RegisterType((*ConfigRequest)(nil), "trinity.ConfigRequest")
	proto.RegisterType((*SetResult)(nil), "trinity.SetResult")
	proto.RegisterType((*FMValue)(nil), "trinity.FMValue")
	proto.RegisterType((*ForwardMap)(nil), "trinity.ForwardMap")
	proto.RegisterType((*DocStat)(nil), "trinity.DocStat")
	proto.RegisterType((*IMValue)(nil), "trinity.IMValue")
	proto.RegisterType((*InvertedMap)(nil), "trinity.InvertedMap")
	proto.RegisterType((*DocMapRequest)(nil), "trinity.DocMapRequest")
	proto.RegisterType((*StartSubsystemRequest)(nil), "trinity.StartSubsystemRequest")
	proto.RegisterType((*StartSubsystemResponse)(nil), "trinity.StartSubsystemResponse")
	proto.RegisterType((*SearchQuery)(nil), "trinity.SearchQuery")
	proto.RegisterType((*SearchResponse)(nil), "trinity.SearchResponse")
	proto.RegisterType((*SearchResult)(nil), "trinity.SearchResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for FMapper service

type FMapperClient interface {
	GetDocMap(ctx context.Context, in *DocMapRequest, opts ...grpc.CallOption) (*ForwardMap, error)
	SetDocMap(ctx context.Context, in *ForwardMap, opts ...grpc.CallOption) (*SetResult, error)
}

type fMapperClient struct {
	cc *grpc.ClientConn
}

func NewFMapperClient(cc *grpc.ClientConn) FMapperClient {
	return &fMapperClient{cc}
}

func (c *fMapperClient) GetDocMap(ctx context.Context, in *DocMapRequest, opts ...grpc.CallOption) (*ForwardMap, error) {
	out := new(ForwardMap)
	err := grpc.Invoke(ctx, "/trinity.FMapper/GetDocMap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fMapperClient) SetDocMap(ctx context.Context, in *ForwardMap, opts ...grpc.CallOption) (*SetResult, error) {
	out := new(SetResult)
	err := grpc.Invoke(ctx, "/trinity.FMapper/SetDocMap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FMapper service

type FMapperServer interface {
	GetDocMap(context.Context, *DocMapRequest) (*ForwardMap, error)
	SetDocMap(context.Context, *ForwardMap) (*SetResult, error)
}

func RegisterFMapperServer(s *grpc.Server, srv FMapperServer) {
	s.RegisterService(&_FMapper_serviceDesc, srv)
}

func _FMapper_GetDocMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FMapperServer).GetDocMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trinity.FMapper/GetDocMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FMapperServer).GetDocMap(ctx, req.(*DocMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FMapper_SetDocMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FMapperServer).SetDocMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trinity.FMapper/SetDocMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FMapperServer).SetDocMap(ctx, req.(*ForwardMap))
	}
	return interceptor(ctx, in, info, handler)
}

var _FMapper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trinity.FMapper",
	HandlerType: (*FMapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDocMap",
			Handler:    _FMapper_GetDocMap_Handler,
		},
		{
			MethodName: "SetDocMap",
			Handler:    _FMapper_SetDocMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorTrinity,
}

// Client API for Trinity service

type TrinityClient interface {
	GetRootConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*RootConfig, error)
	SetRootConfig(ctx context.Context, in *RootConfig, opts ...grpc.CallOption) (*SetResult, error)
}

type trinityClient struct {
	cc *grpc.ClientConn
}

func NewTrinityClient(cc *grpc.ClientConn) TrinityClient {
	return &trinityClient{cc}
}

func (c *trinityClient) GetRootConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*RootConfig, error) {
	out := new(RootConfig)
	err := grpc.Invoke(ctx, "/trinity.Trinity/GetRootConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trinityClient) SetRootConfig(ctx context.Context, in *RootConfig, opts ...grpc.CallOption) (*SetResult, error) {
	out := new(SetResult)
	err := grpc.Invoke(ctx, "/trinity.Trinity/SetRootConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Trinity service

type TrinityServer interface {
	GetRootConfig(context.Context, *ConfigRequest) (*RootConfig, error)
	SetRootConfig(context.Context, *RootConfig) (*SetResult, error)
}

func RegisterTrinityServer(s *grpc.Server, srv TrinityServer) {
	s.RegisterService(&_Trinity_serviceDesc, srv)
}

func _Trinity_GetRootConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrinityServer).GetRootConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trinity.Trinity/GetRootConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrinityServer).GetRootConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trinity_SetRootConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RootConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrinityServer).SetRootConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trinity.Trinity/SetRootConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrinityServer).SetRootConfig(ctx, req.(*RootConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _Trinity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trinity.Trinity",
	HandlerType: (*TrinityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRootConfig",
			Handler:    _Trinity_GetRootConfig_Handler,
		},
		{
			MethodName: "SetRootConfig",
			Handler:    _Trinity_SetRootConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorTrinity,
}

// Client API for Subsystem service

type SubsystemClient interface {
	StartMainLoop(ctx context.Context, in *StartSubsystemRequest, opts ...grpc.CallOption) (*StartSubsystemResponse, error)
}

type subsystemClient struct {
	cc *grpc.ClientConn
}

func NewSubsystemClient(cc *grpc.ClientConn) SubsystemClient {
	return &subsystemClient{cc}
}

func (c *subsystemClient) StartMainLoop(ctx context.Context, in *StartSubsystemRequest, opts ...grpc.CallOption) (*StartSubsystemResponse, error) {
	out := new(StartSubsystemResponse)
	err := grpc.Invoke(ctx, "/trinity.Subsystem/StartMainLoop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Subsystem service

type SubsystemServer interface {
	StartMainLoop(context.Context, *StartSubsystemRequest) (*StartSubsystemResponse, error)
}

func RegisterSubsystemServer(s *grpc.Server, srv SubsystemServer) {
	s.RegisterService(&_Subsystem_serviceDesc, srv)
}

func _Subsystem_StartMainLoop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSubsystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubsystemServer).StartMainLoop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trinity.Subsystem/StartMainLoop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubsystemServer).StartMainLoop(ctx, req.(*StartSubsystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Subsystem_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trinity.Subsystem",
	HandlerType: (*SubsystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartMainLoop",
			Handler:    _Subsystem_StartMainLoop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorTrinity,
}

// Client API for Gateway service

type GatewayClient interface {
	GetSearchQuery(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (*SearchResponse, error)
}

type gatewayClient struct {
	cc *grpc.ClientConn
}

func NewGatewayClient(cc *grpc.ClientConn) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) GetSearchQuery(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/trinity.Gateway/GetSearchQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gateway service

type GatewayServer interface {
	GetSearchQuery(context.Context, *SearchQuery) (*SearchResponse, error)
}

func RegisterGatewayServer(s *grpc.Server, srv GatewayServer) {
	s.RegisterService(&_Gateway_serviceDesc, srv)
}

func _Gateway_GetSearchQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetSearchQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trinity.Gateway/GetSearchQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetSearchQuery(ctx, req.(*SearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trinity.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSearchQuery",
			Handler:    _Gateway_GetSearchQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorTrinity,
}

func (m *RootConfig) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RootConfig) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeRole) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintTrinity(data, i, uint64(len(m.NodeRole)))
		i += copy(data[i:], m.NodeRole)
	}
	if m.FIndex != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTrinity(data, i, uint64(m.FIndex.Size()))
		n1, err := m.FIndex.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.IIndex != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTrinity(data, i, uint64(m.IIndex.Size()))
		n2, err := m.IIndex.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.APIPort) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintTrinity(data, i, uint64(len(m.APIPort)))
		i += copy(data[i:], m.APIPort)
	}
	return i, nil
}

func (m *FIndexConfig) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FIndexConfig) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxSize != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintTrinity(data, i, uint64(m.MaxSize))
	}
	if len(m.StorePath) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintTrinity(data, i, uint64(len(m.StorePath)))
		i += copy(data[i:], m.StorePath)
	}
	return i, nil
}

func (m *IIndexConfig) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *IIndexConfig) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxSize != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintTrinity(data, i, uint64(m.MaxSize))
	}
	if len(m.StorePath) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintTrinity(data, i, uint64(len(m.StorePath)))
		i += copy(data[i:], m.StorePath)
	}
	return i, nil
}

func (m *ConfigRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ConfigRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintTrinity(data, i, uint64(len(m.Type)))
		i += copy(data[i:], m.Type)
	}
	return i, nil
}

func (m *SetResult) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SetResult) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintTrinity(data, i, uint64(len(m.Result)))
		i += copy(data[i:], m.Result)
	}
	return i, nil
}

func (m *FMValue) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FMValue) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Locations) > 0 {
		for _, num := range m.Locations {
			data[i] = 0x8
			i++
			i = encodeVarintTrinity(data, i, uint64(num))
		}
	}
	return i, nil
}

func (m *ForwardMap) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ForwardMap) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FindexApiVersion != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintTrinity(data, i, uint64(m.FindexApiVersion))
	}
	if len(m.TheMap) > 0 {
		for k, _ := range m.TheMap {
			data[i] = 0x12
			i++
			v := m.TheMap[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTrinity(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTrinity(uint64(len(k))) + msgSize
			i = encodeVarintTrinity(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintTrinity(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			if v != nil {
				data[i] = 0x12
				i++
				i = encodeVarintTrinity(data, i, uint64(v.Size()))
				n3, err := v.MarshalTo(data[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	return i, nil
}

func (m *DocStat) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DocStat) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Docname) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintTrinity(data, i, uint64(len(m.Docname)))
		i += copy(data[i:], m.Docname)
	}
	if m.Count != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintTrinity(data, i, uint64(m.Count))
	}
	return i, nil
}

func (m *IMValue) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *IMValue) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Docs) > 0 {
		for _, msg := range m.Docs {
			data[i] = 0xa
			i++
			i = encodeVarintTrinity(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InvertedMap) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *InvertedMap) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IindexApiVersion != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintTrinity(data, i, uint64(m.IindexApiVersion))
	}
	if len(m.TheMap) > 0 {
		for k, _ := range m.TheMap {
			data[i] = 0x12
			i++
			v := m.TheMap[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTrinity(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTrinity(uint64(len(k))) + msgSize
			i = encodeVarintTrinity(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintTrinity(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			if v != nil {
				data[i] = 0x12
				i++
				i = encodeVarintTrinity(data, i, uint64(v.Size()))
				n4, err := v.MarshalTo(data[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	return i, nil
}

func (m *DocMapRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DocMapRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Docname) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintTrinity(data, i, uint64(len(m.Docname)))
		i += copy(data[i:], m.Docname)
	}
	return i, nil
}

func (m *StartSubsystemRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StartSubsystemRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SubsystemName) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintTrinity(data, i, uint64(len(m.SubsystemName)))
		i += copy(data[i:], m.SubsystemName)
	}
	return i, nil
}

func (m *StartSubsystemResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StartSubsystemResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ResponseCode) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintTrinity(data, i, uint64(len(m.ResponseCode)))
		i += copy(data[i:], m.ResponseCode)
	}
	return i, nil
}

func (m *SearchQuery) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SearchQuery) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintTrinity(data, i, uint64(len(m.Query)))
		i += copy(data[i:], m.Query)
	}
	return i, nil
}

func (m *SearchResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SearchResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, msg := range m.Results {
			data[i] = 0xa
			i++
			i = encodeVarintTrinity(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SearchResult) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SearchResult) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintTrinity(data, i, uint64(len(m.Title)))
		i += copy(data[i:], m.Title)
	}
	if len(m.Hash) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintTrinity(data, i, uint64(len(m.Hash)))
		i += copy(data[i:], m.Hash)
	}
	if len(m.Description) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintTrinity(data, i, uint64(len(m.Description)))
		i += copy(data[i:], m.Description)
	}
	return i, nil
}

func encodeFixed64Trinity(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Trinity(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTrinity(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *RootConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.NodeRole)
	if l > 0 {
		n += 1 + l + sovTrinity(uint64(l))
	}
	if m.FIndex != nil {
		l = m.FIndex.Size()
		n += 1 + l + sovTrinity(uint64(l))
	}
	if m.IIndex != nil {
		l = m.IIndex.Size()
		n += 1 + l + sovTrinity(uint64(l))
	}
	l = len(m.APIPort)
	if l > 0 {
		n += 1 + l + sovTrinity(uint64(l))
	}
	return n
}

func (m *FIndexConfig) Size() (n int) {
	var l int
	_ = l
	if m.MaxSize != 0 {
		n += 1 + sovTrinity(uint64(m.MaxSize))
	}
	l = len(m.StorePath)
	if l > 0 {
		n += 1 + l + sovTrinity(uint64(l))
	}
	return n
}

func (m *IIndexConfig) Size() (n int) {
	var l int
	_ = l
	if m.MaxSize != 0 {
		n += 1 + sovTrinity(uint64(m.MaxSize))
	}
	l = len(m.StorePath)
	if l > 0 {
		n += 1 + l + sovTrinity(uint64(l))
	}
	return n
}

func (m *ConfigRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTrinity(uint64(l))
	}
	return n
}

func (m *SetResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovTrinity(uint64(l))
	}
	return n
}

func (m *FMValue) Size() (n int) {
	var l int
	_ = l
	if len(m.Locations) > 0 {
		for _, e := range m.Locations {
			n += 1 + sovTrinity(uint64(e))
		}
	}
	return n
}

func (m *ForwardMap) Size() (n int) {
	var l int
	_ = l
	if m.FindexApiVersion != 0 {
		n += 1 + sovTrinity(uint64(m.FindexApiVersion))
	}
	if len(m.TheMap) > 0 {
		for k, v := range m.TheMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTrinity(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTrinity(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTrinity(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DocStat) Size() (n int) {
	var l int
	_ = l
	l = len(m.Docname)
	if l > 0 {
		n += 1 + l + sovTrinity(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovTrinity(uint64(m.Count))
	}
	return n
}

func (m *IMValue) Size() (n int) {
	var l int
	_ = l
	if len(m.Docs) > 0 {
		for _, e := range m.Docs {
			l = e.Size()
			n += 1 + l + sovTrinity(uint64(l))
		}
	}
	return n
}

func (m *InvertedMap) Size() (n int) {
	var l int
	_ = l
	if m.IindexApiVersion != 0 {
		n += 1 + sovTrinity(uint64(m.IindexApiVersion))
	}
	if len(m.TheMap) > 0 {
		for k, v := range m.TheMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTrinity(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTrinity(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTrinity(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DocMapRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Docname)
	if l > 0 {
		n += 1 + l + sovTrinity(uint64(l))
	}
	return n
}

func (m *StartSubsystemRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SubsystemName)
	if l > 0 {
		n += 1 + l + sovTrinity(uint64(l))
	}
	return n
}

func (m *StartSubsystemResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.ResponseCode)
	if l > 0 {
		n += 1 + l + sovTrinity(uint64(l))
	}
	return n
}

func (m *SearchQuery) Size() (n int) {
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovTrinity(uint64(l))
	}
	return n
}

func (m *SearchResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovTrinity(uint64(l))
		}
	}
	return n
}

func (m *SearchResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTrinity(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTrinity(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTrinity(uint64(l))
	}
	return n
}

func sovTrinity(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTrinity(x uint64) (n int) {
	return sovTrinity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RootConfig) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrinity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RootConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RootConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeRole", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrinity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeRole = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrinity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FIndex == nil {
				m.FIndex = &FIndexConfig{}
			}
			if err := m.FIndex.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrinity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IIndex == nil {
				m.IIndex = &IIndexConfig{}
			}
			if err := m.IIndex.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrinity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIPort = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrinity(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrinity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FIndexConfig) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrinity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FIndexConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FIndexConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSize", wireType)
			}
			m.MaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MaxSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrinity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorePath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrinity(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrinity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IIndexConfig) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrinity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IIndexConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IIndexConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSize", wireType)
			}
			m.MaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MaxSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrinity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorePath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrinity(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrinity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrinity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrinity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrinity(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrinity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetResult) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrinity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrinity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrinity(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrinity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FMValue) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrinity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FMValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FMValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Locations = append(m.Locations, v)
		default:
			iNdEx = preIndex
			skippy, err := skipTrinity(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrinity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwardMap) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrinity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindexApiVersion", wireType)
			}
			m.FindexApiVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.FindexApiVersion |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrinity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthTrinity
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.TheMap == nil {
				m.TheMap = make(map[string]*FMValue)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrinity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrinity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthTrinity
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthTrinity
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &FMValue{}
				if err := mapvalue.Unmarshal(data[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.TheMap[mapkey] = mapvalue
			} else {
				var mapvalue *FMValue
				m.TheMap[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrinity(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrinity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocStat) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrinity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Docname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrinity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Docname = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrinity(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrinity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IMValue) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrinity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IMValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IMValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Docs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrinity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Docs = append(m.Docs, &DocStat{})
			if err := m.Docs[len(m.Docs)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrinity(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrinity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvertedMap) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrinity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvertedMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvertedMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IindexApiVersion", wireType)
			}
			m.IindexApiVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.IindexApiVersion |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrinity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthTrinity
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.TheMap == nil {
				m.TheMap = make(map[string]*IMValue)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrinity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrinity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthTrinity
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthTrinity
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &IMValue{}
				if err := mapvalue.Unmarshal(data[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.TheMap[mapkey] = mapvalue
			} else {
				var mapvalue *IMValue
				m.TheMap[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrinity(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrinity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocMapRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrinity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Docname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrinity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Docname = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrinity(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrinity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartSubsystemRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrinity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartSubsystemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartSubsystemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubsystemName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrinity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubsystemName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrinity(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrinity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartSubsystemResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrinity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartSubsystemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartSubsystemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrinity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseCode = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrinity(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrinity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchQuery) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrinity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrinity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrinity(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrinity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrinity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrinity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &SearchResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrinity(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrinity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchResult) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrinity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrinity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrinity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrinity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrinity(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrinity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrinity(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrinity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrinity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTrinity
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTrinity
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTrinity(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTrinity = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrinity   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("trinity.proto", fileDescriptorTrinity) }

var fileDescriptorTrinity = []byte{
	// 783 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x55, 0x4f, 0x4f, 0xdb, 0x4a,
	0x10, 0x8f, 0x09, 0xc4, 0x78, 0x82, 0x51, 0xb4, 0xef, 0xc1, 0xcb, 0x8b, 0xde, 0x0b, 0x91, 0xe9,
	0x9f, 0x54, 0x6a, 0x41, 0x4a, 0xa5, 0x0a, 0x90, 0x8a, 0x94, 0x42, 0x49, 0xad, 0x12, 0x44, 0x1d,
	0xc4, 0xa1, 0x17, 0x6b, 0xb1, 0x97, 0xc6, 0x6a, 0xe2, 0x35, 0xeb, 0x0d, 0x10, 0xa4, 0x1e, 0xfb,
	0x1d, 0x7a, 0xec, 0x57, 0xa9, 0x7a, 0xe9, 0xb1, 0x1f, 0xa1, 0xa2, 0x5f, 0xa4, 0xb2, 0x77, 0x1d,
	0x3b, 0x21, 0xb9, 0x71, 0xdb, 0x99, 0xfd, 0xcd, 0x78, 0xf6, 0x37, 0xbf, 0x19, 0x83, 0xce, 0x99,
	0xe7, 0x7b, 0x7c, 0xb8, 0x11, 0x30, 0xca, 0x29, 0x52, 0xa5, 0x69, 0x7c, 0x55, 0x00, 0x2c, 0x4a,
	0xf9, 0x1e, 0xf5, 0xcf, 0xbd, 0x0f, 0xa8, 0x02, 0x8b, 0x47, 0xd4, 0x25, 0x16, 0xed, 0x91, 0xb2,
	0x52, 0x53, 0xea, 0x9a, 0x35, 0xb2, 0xd1, 0x33, 0x28, 0x1c, 0x98, 0xbe, 0x4b, 0xae, 0xcb, 0x73,
	0x35, 0xa5, 0x5e, 0x6c, 0xac, 0x6c, 0x24, 0x39, 0x85, 0x5b, 0xa4, 0xb0, 0x24, 0x28, 0x82, 0x9b,
	0x02, 0x9e, 0x9f, 0x80, 0x9b, 0x63, 0x70, 0x61, 0xa1, 0x32, 0xa8, 0xcd, 0x63, 0xf3, 0x98, 0x32,
	0x5e, 0x9e, 0x8f, 0x3f, 0x9c, 0x98, 0xc6, 0x1b, 0x58, 0xca, 0x7e, 0x00, 0xfd, 0x0b, 0x8b, 0x7d,
	0x7c, 0x6d, 0x87, 0xde, 0x8d, 0xa8, 0x51, 0xb7, 0xd4, 0x3e, 0xbe, 0xee, 0x78, 0x37, 0x04, 0xfd,
	0x0f, 0x10, 0x72, 0xca, 0x88, 0x1d, 0x60, 0xde, 0x8d, 0xcb, 0xd4, 0x2c, 0x2d, 0xf6, 0x1c, 0x63,
	0xde, 0x8d, 0x32, 0x99, 0xf7, 0x93, 0x69, 0x1d, 0x74, 0x59, 0x3f, 0xb9, 0x18, 0x90, 0x90, 0x23,
	0x04, 0xf3, 0x7c, 0x18, 0x24, 0xa4, 0xc5, 0x67, 0x63, 0x1d, 0xb4, 0x0e, 0xe1, 0x16, 0x09, 0x07,
	0x3d, 0x8e, 0x56, 0xa1, 0xc0, 0xe2, 0x93, 0x84, 0x48, 0xcb, 0x78, 0x0c, 0xea, 0x41, 0xfb, 0x14,
	0xf7, 0x06, 0x04, 0xfd, 0x07, 0x5a, 0x8f, 0x3a, 0x98, 0x7b, 0xd4, 0x0f, 0xcb, 0x4a, 0x2d, 0x5f,
	0xd7, 0xad, 0xd4, 0x61, 0x7c, 0x53, 0x00, 0x0e, 0x28, 0xbb, 0xc2, 0xcc, 0x6d, 0xe3, 0x00, 0x3d,
	0x05, 0x74, 0xee, 0x45, 0x6f, 0xb1, 0x71, 0xe0, 0xd9, 0x97, 0x84, 0x85, 0x1e, 0xf5, 0xe5, 0x2b,
	0x4a, 0xe2, 0xa6, 0x19, 0x78, 0xa7, 0xc2, 0x8f, 0xb6, 0x40, 0xe5, 0x5d, 0x62, 0xf7, 0x71, 0x50,
	0x9e, 0xab, 0xe5, 0xeb, 0xc5, 0xc6, 0x5a, 0xda, 0xbc, 0x51, 0xce, 0x8d, 0x93, 0x2e, 0x69, 0xe3,
	0xe0, 0xb5, 0xcf, 0xd9, 0xd0, 0x2a, 0xf0, 0xd8, 0xa8, 0xbc, 0x85, 0x62, 0xc6, 0x8d, 0x4a, 0x90,
	0xff, 0x48, 0x86, 0xf2, 0x0d, 0xd1, 0x11, 0x3d, 0x82, 0x85, 0xcb, 0xa8, 0x7c, 0xa9, 0x8a, 0x52,
	0x9a, 0x58, 0x3c, 0xcb, 0x12, 0xd7, 0x3b, 0x73, 0x5b, 0x8a, 0xb1, 0x0d, 0xea, 0x3e, 0x75, 0x3a,
	0x1c, 0xf3, 0xa8, 0xdf, 0x2e, 0x75, 0x7c, 0xdc, 0x4f, 0x38, 0x4b, 0x4c, 0xf4, 0x37, 0x2c, 0x38,
	0x74, 0xe0, 0xf3, 0x38, 0xa1, 0x6e, 0x09, 0xc3, 0xd8, 0x04, 0xd5, 0x94, 0x3c, 0x3d, 0x80, 0x79,
	0x97, 0x3a, 0x82, 0xa2, 0xec, 0x07, 0x65, 0x6a, 0x2b, 0xbe, 0x35, 0xbe, 0x2b, 0x50, 0x34, 0xfd,
	0x4b, 0xc2, 0x38, 0x49, 0x08, 0xf3, 0x66, 0x12, 0xe6, 0x4d, 0x12, 0xb6, 0x3d, 0x49, 0x58, 0x2d,
	0x95, 0x6f, 0x9a, 0xf4, 0x9e, 0x19, 0x33, 0xef, 0x32, 0xf6, 0x04, 0xf4, 0x7d, 0xea, 0xb4, 0x71,
	0x90, 0x08, 0x6d, 0x26, 0x6f, 0xc6, 0x2e, 0xac, 0x74, 0x38, 0x66, 0xbc, 0x33, 0x38, 0x0b, 0x87,
	0x21, 0x27, 0xfd, 0x24, 0xe4, 0x21, 0x2c, 0x87, 0x89, 0xcf, 0xce, 0x44, 0xea, 0x23, 0xef, 0x51,
	0x14, 0xff, 0x12, 0x56, 0x27, 0xe3, 0xc3, 0x80, 0xfa, 0x21, 0x41, 0xeb, 0xa0, 0x33, 0x79, 0xb6,
	0x1d, 0xea, 0x26, 0xf1, 0x4b, 0x89, 0x73, 0x8f, 0xba, 0x91, 0xda, 0x8b, 0x1d, 0x82, 0x99, 0xd3,
	0x7d, 0x37, 0x20, 0x6c, 0x18, 0x75, 0xf1, 0x22, 0x3a, 0x48, 0xac, 0x30, 0x8c, 0x26, 0x2c, 0x0b,
	0xd0, 0x28, 0xf7, 0x26, 0xa8, 0x62, 0x12, 0x92, 0x7e, 0xa6, 0x7b, 0x62, 0x84, 0x1c, 0xf4, 0xb8,
	0x95, 0xa0, 0x8c, 0xf7, 0xb0, 0x94, 0xbd, 0x88, 0x3e, 0xc4, 0x3d, 0x3e, 0xda, 0x57, 0xc2, 0x88,
	0xe6, 0xb1, 0x8b, 0xc3, 0x64, 0x72, 0xe3, 0x33, 0xaa, 0x41, 0xd1, 0x25, 0xa1, 0xc3, 0xbc, 0x20,
	0x9a, 0xa8, 0x78, 0x2d, 0x69, 0x56, 0xd6, 0xd5, 0xf8, 0x14, 0x0d, 0x23, 0x0e, 0x02, 0xc2, 0xd0,
	0x0e, 0x68, 0x2d, 0xc2, 0x05, 0xf7, 0x68, 0x35, 0xab, 0xb1, 0xb4, 0x19, 0x95, 0xbf, 0xa6, 0x4c,
	0x91, 0x91, 0x43, 0x2f, 0xe2, 0xc1, 0x97, 0xb1, 0xd3, 0x30, 0x15, 0x94, 0x79, 0xa4, 0xdc, 0x10,
	0x46, 0xae, 0xf1, 0x59, 0x01, 0xf5, 0x44, 0xf8, 0xd1, 0x2e, 0xe8, 0x2d, 0xc2, 0x33, 0xab, 0x39,
	0xad, 0x61, 0x6c, 0xf3, 0x64, 0x6a, 0x48, 0xc1, 0x46, 0x0e, 0xed, 0x80, 0xde, 0x19, 0x8b, 0x9f,
	0x86, 0x9b, 0x51, 0x87, 0x0d, 0xda, 0x48, 0x04, 0xc8, 0x02, 0x3d, 0x96, 0x45, 0x1b, 0x7b, 0xfe,
	0x21, 0xa5, 0x01, 0xaa, 0xa6, 0x31, 0xd3, 0xe4, 0x56, 0x59, 0x9b, 0x79, 0x2f, 0x5a, 0x6e, 0xe4,
	0x1a, 0x87, 0xa0, 0xb6, 0x30, 0x27, 0x57, 0x78, 0x88, 0x9a, 0xb0, 0xdc, 0x22, 0x7c, 0x4c, 0x39,
	0x13, 0x02, 0x88, 0xbd, 0x95, 0x7f, 0xee, 0xca, 0x42, 0x66, 0x7b, 0x55, 0xfa, 0x71, 0x5b, 0x55,
	0x7e, 0xde, 0x56, 0x95, 0x5f, 0xb7, 0x55, 0xe5, 0xcb, 0xef, 0x6a, 0xee, 0xac, 0x10, 0xff, 0xe5,
	0x9e, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x32, 0x64, 0x1d, 0x8f, 0xf6, 0x06, 0x00, 0x00,
}
